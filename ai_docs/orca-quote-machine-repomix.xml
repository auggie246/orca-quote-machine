This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  commands/
    debug-async.md
    dev.md
    format.md
    lint.md
    reflection.md
    review.md
    rust-calc.md
    slice.md
    test.md
  settings.json
.github/
  workflows/
    ci.yml
app/
  core/
    config.py
  models/
    __init__.py
    quote.py
  services/
    __init__.py
    pricing.py
    slicer.py
    telegram.py
  __init__.py
  main.py
  tasks.py
scripts/
  format.sh
  production-server.sh
  setup.sh
  test.sh
  web-server.sh
  worker.sh
src/
  lib.rs
templates/
  index.html
tests/
  models/
    __init__.py
    test_quote.py
  services/
    __init__.py
    test_pricing.py
    test_slicer.py
    test_telegram.py
  __init__.py
  conftest.py
  test_config.py
  test_main.py
  test_tasks.py
.gitignore
.pre-commit-config.yaml
Cargo.toml
CLAUDE.md
docker-compose.yml
Dockerfile
example.env
LICENSE
nginx.conf
poc_orcaslicer.py
pyproject.toml
README.md
result.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".claude/commands/debug-async.md">
# Debug Async Command

Comprehensive debugging for async/Celery issues in the application.

This command provides:
- Celery worker status and active tasks
- Redis connection diagnostics
- Async/sync boundary analysis
- Performance profiling commands
- Task queue monitoring

## Usage
```
/debug-async [component]
```

## Components
- `celery` - Worker status and task monitoring
- `redis` - Connection and latency testing  
- `tasks` - Active task analysis
- `performance` - System resource monitoring
- `all` - Complete diagnostic suite (default)

Automatically runs appropriate diagnostic commands based on current system state.
</file>

<file path=".claude/commands/dev.md">
# Dev Command

Starts the development server with auto-reload enabled.

```bash
./scripts/web-server.sh
```

This command:
- Starts FastAPI development server
- Enables auto-reload on file changes
- Runs on default development port
- Requires Redis to be running for full functionality
</file>

<file path=".claude/commands/format.md">
# Format Command

Formats code and runs linting checks using ruff and mypy.

```bash
./scripts/format.sh
```

This command executes:
- Code formatting with ruff format
- Import sorting with ruff check --fix
- Type checking with mypy
- Reports any remaining lint issues
</file>

<file path=".claude/commands/lint.md">
# Lint Command

Checks code for linting errors and type issues without fixing them.

```bash
uv run ruff check app tests && uv run mypy app
```

This command:
- Runs ruff linting checks on app and tests directories
- Runs mypy type checking on the app directory
- Reports issues without auto-fixing
- Use `/format` to fix auto-fixable issues
</file>

<file path=".claude/commands/reflection.md">
You are an expert in prompt engineering, specializing in optimizing AI code assistant instructions for the Claude Code agentic framework. Your task is to analyze and improve the instructions, commands, and configuration of this repository to enhance your performance as a coding agent.

Follow these steps carefully:

### 1. Analysis Phase

First, review the chat history in your context window to understand the recent interactions and goals.

Then, examine the current Claude Code configuration files. Be sure to look at all of them to get a complete picture:
<claude_instructions>
**/CLAUDE.md
/.claude/commands/*
/.claude/settings.json
/.claude/settings.local.json
</claude_instructions>

Analyze the chat history and the configuration files to identify areas that could be improved. Look for:
-   **Inconsistencies:** Contradictions in your responses or instructions.
-   **Misunderstandings:** Instances where you misunderstood user requests.
-   **Clarity & Detail:** Areas where your output could be more detailed, accurate, or clear.
-   **Command Enhancement:** Opportunities for new commands, or improvements to an existing command's name, function, or response format.
-   **Task Handling:** Ways to enhance your ability to handle specific or complex coding tasks relevant to this repository.
-   **Configuration Drift:** Permissions or capabilities (MCPs) that have been approved or used in practice but are not yet reflected in the `.claude/settings.json` file.

### 2. Interaction Phase

Present your findings and improvement ideas to the human one by one. For each suggestion, you must:
a) Explain the current issue or opportunity you have identified.
b) Propose a specific, concrete change to the files.
c) Describe how this change will improve your performance or capabilities.

**Crucially, you must wait for feedback and approval from the human on each suggestion before proceeding to the next one.** If a suggestion is not approved, refine it based on the feedback or move on to your next idea.

### 3. Implementation Phase

Once a change is approved, you will implement it. For each approved change:
a) Clearly state the file and section you are modifying.
b) Present the new or modified text for that section.
c) Briefly explain how this implemented change addresses the issue identified in your analysis.

### 4. Output Format

Present your final output in the following distinct sections:

<analysis>
[A summary of all the issues and potential improvements you identified in the Analysis Phase.]
</analysis>

<improvements>
[For each approved improvement, provide:
1.  **File & Section:** The file path and section being modified.
2.  **New Text:** The new or modified instruction text.
3.  **Reasoning:** An explanation of how this change addresses the identified issue.]
</improvements>

<final_instructions>
[Present the complete, updated set of instructions for the primary CLAUDE.md file, incorporating all approved changes.]
</final_instructions>

Your ultimate goal is to enhance your performance and consistency while maintaining the core purpose of your role in this repository. Be thorough in your analysis, clear in your explanations, and precise in your implementations.
</file>

<file path=".claude/commands/review.md">
# Review Command

Performs architecture-aware code review using domain-specific patterns.

This command checks for:
- Async/sync boundary violations
- Proper Celery task patterns
- Rust integration safety
- OrcaSlicer CLI usage
- File handling and cleanup
- Security and performance issues

## Usage
```
/review [file_or_directory] [focus_area]
```

## Focus Areas
- `async` - Async/await patterns and performance
- `celery` - Task design and idempotency
- `rust` - PyO3 integration and safety
- `security` - File handling and input validation
- `performance` - Resource usage and optimization
- `all` - Complete review (default)

Uses advanced thinking mode for thorough analysis of architectural patterns.
</file>

<file path=".claude/commands/rust-calc.md">
# Rust Calc Command

Creates a new Rust calculation function with proper PyO3 bindings.

This command scaffolds:
- Rust function with panic handling
- PyO3 Python bindings
- Python wrapper with error handling
- Type safety between Rust/Python boundary

## Usage
```
/rust-calc <function_name> <input_types> <output_type>
```

## Example
```
/rust-calc mesh_volume "Vec<f32>, Vec<u32>" f64
```

This generates the complete Rust calculation pattern with proper memory safety and error propagation.
</file>

<file path=".claude/commands/slice.md">
# Slice Command

Creates a new slicing workflow using the API Task Offload pattern.

This command scaffolds:
- FastAPI endpoint for file upload
- Celery task for OrcaSlicer processing
- Status polling endpoint
- Pydantic models for request/response
- Proper async/sync boundary handling

## Usage
```
/slice <endpoint_name> <material_type>
```

## Example
```
/slice quote_model PLA
```

This generates the complete workflow for handling 3D model slicing with proper error handling, file cleanup, and progress tracking.
</file>

<file path=".claude/commands/test.md">
# Test Command

Runs the full test suite including Python, Rust, and integration tests.

```bash
./scripts/test.sh
```

This command executes:
- Python unit tests with pytest
- Rust component tests
- Integration tests for the complete pipeline
- Generates coverage reports
</file>

<file path=".claude/settings.json">
{
  "version": "1.1",
  "project_name": "3D Printing Quotation System",
  "description": "Base Claude Code security-focused configuration for orca-quote-machine",
  "operational_mode": "pro_collaborator",
  "permissions": {
    "allow": [
      "mcp__zen__chat",
      "mcp__zen__codereview",
      "mcp__zen__refactor",
      "mcp__zen__analyze",
      "mcp__zen__thinkdeep",
      "mcp__zen__debug",
      "mcp__zen__testgen",
      "mcp__zen__precommit",
      "mcp__zen__consensus",
      "mcp__zen__planner",
      "mcp__zen__tracer",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(mkdir:*)",
      "Bash(uv run:*)",
      "Bash(find:*)",
      "Bash(git status:*)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(git branch:*)",
      "Bash(git checkout:-b*)",
      "Bash(git checkout:main)",
      "Bash(git checkout:master)",
      "Bash(git reset:--soft*)",
      "Bash(git reset:HEAD*)",
      "Bash(pre-commit:*)",
      "Bash(rg:*)",
      "Bash(grep:*)",
      "Bash(ls:config/slicer_profiles/*)",
      "Bash(test:*)",
      "Bash(redis-cli:ping)",
      "Bash(maturin develop:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:origin*)",
      "Bash(gh pr create:*)",
      "Bash(gh pr edit:*)"
    ],
    "deny": [
      "Bash(git add:.)",
      "Bash(git add:--all)",
      "Bash(git add:-A)",
      "Bash(git push:--force*)",
      "Bash(git push:-f*)",
      "Bash(git reset:--hard*)",
      "Bash(rm:-rf*)",
      "Bash(sudo:*)"
    ]
  },
  "security": {
    "git_safety": {
      "require_manual_approval": ["git add", "git commit", "git push"],
      "blocked_patterns": [".env", "*token*", "*key*", "*secret*", "*credential*"],
      "pre_commit_required": true
    },
    "file_operations": {
      "never_commit": [".env", ".env.*", "!.env.example"],
      "scan_for_secrets": true
    }
  },
  "modes": {
    "pro_collaborator": {
      "description": "Deep analysis, proactive checks, pattern enforcement, assumes high user expertise",
      "model_preference": "pro",
      "thinking_mode": "high",
      "proactive_checks": ["all"],
      "request_planning": true,
      "domain_expertise": true
    },
    "fast_prototyper": {
      "description": "Quick code generation, less verbose, focuses on functionality over patterns",
      "model_preference": "flash",
      "thinking_mode": "medium",
      "proactive_checks": ["critical"],
      "request_planning": false,
      "domain_expertise": false
    }
  },
  "proactive_checks": {
    "enable": true,
    "checks": {
      "BLOCKING_IO_IN_ASYNC_ROUTE": {
        "level": "error",
        "description": "Detects blocking I/O in FastAPI async routes, recommends Celery task or run_in_executor"
      },
      "UNHANDLED_RUST_PANIC": {
        "level": "error",
        "description": "Ensures Python code calling Rust functions has proper exception handling"
      },
      "MISSING_CELERY_IDEMPOTENCY": {
        "level": "warning",
        "description": "Reviews Celery tasks for safe re-execution patterns"
      },
      "INCORRECT_ORCASLICER_CALL": {
        "level": "error",
        "description": "Validates subprocess calls to OrcaSlicer against known CLI arguments"
      },
      "ASYNC_SYNC_BOUNDARY_VIOLATION": {
        "level": "error",
        "description": "Detects improper mixing of async/sync code without proper coordination"
      },
      "MISSING_FILE_CLEANUP": {
        "level": "warning",
        "description": "Ensures uploaded files are cleaned up in finally blocks"
      },
      "TEST_ENVIRONMENT_DETECTION": {
        "level": "warning",
        "description": "Ensures proper test environment detection using PYTEST_CURRENT_TEST patterns"
      },
      "INCORRECT_PYO3_INTEGRATION": {
        "level": "error",
        "description": "Detects PyO3 classes with conflicting Serde derives, explicit constructors, or missing factory functions"
      }
    }
  },
  "architectural_patterns": {
    "api_task_offload": {
      "description": "Pattern for long-running operations: FastAPI -> Celery -> Status polling",
      "required_components": ["endpoint", "celery_task", "status_endpoint", "pydantic_models"]
    },
    "rust_calculation": {
      "description": "Pattern for CPU-bound operations: PyO3 bindings with panic handling",
      "required_components": ["rust_function", "pyo3_binding", "python_wrapper", "error_handling"]
    },
    "pyo3_object_creation": {
      "description": "Pattern for creating PyO3 classes: Clean derives, factory functions, real object testing",
      "required_components": ["clean_derives", "factory_function", "property_access", "real_object_tests"]
    }
  },
  "mcp_servers": {
    "zen": {
      "command": "npx",
      "args": ["-y", "@anthropic-ai/mcp-server-zen@latest"],
      "disabled": false
    },
    "ide": {
      "command": "npx",
      "args": ["-y", "@anthropic-ai/mcp-server-ide@latest"],
      "disabled": false
    }
  },
  "rules": [
    {
      "for_mcp_server": "zen",
      "allow": [
        "mcp__zen__thinkdeep",
        "mcp__zen__codereview",

        "mcp__zen__debug",
        "mcp__zen__analyze",
        "mcp__zen__chat",
        "mcp__zen__precommit",
        "mcp__zen__testgen",
        "mcp__zen__refactor",
        "mcp__zen__tracer",
        "mcp__zen__consensus",
        "mcp__zen__planner",
        "mcp__zen__version"
      ]
    },
    {
      "for_mcp_server": "ide",
      "allow": [
        "mcp__ide__getDiagnostics",
        "mcp__ide__executeCode"
      ]
    }
  ]
}
</file>

<file path=".github/workflows/ci.yml">
name: Lint and Format

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Cancel in-progress runs on the same branch when a new commit is pushed.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grant permissions to only this job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install uv
          uv sync --group dev

      - name: Run Ruff Linter (with auto-fix)
        run: uv run ruff check --fix ./app ./tests

      - name: Run Ruff Formatter
        run: uv run ruff format ./app ./tests

      - name: Run Tests
        run: uv run pytest -xvs tests/ --tb=short

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: auto-format and lint with ruff [skip ci]"
</file>

<file path="app/core/config.py">
"""Application configuration settings."""

import os
from functools import lru_cache
from pathlib import Path

from pydantic import BaseModel, field_validator, model_validator
from pydantic_settings import BaseSettings, SettingsConfigDict


class SlicerProfileSettings(BaseModel):
    """Configuration for default slicer profiles."""

    base_dir: Path = Path("config/slicer_profiles")

    # Default machine and process profiles
    machine: str = "RatRig V-Core 3 400 0.5 nozzle.json"
    process: str = "0.2mm RatRig 0.5mm nozzle.json"

    # Per-material filament profiles for official materials
    # These act as overrides for the default file-based convention
    filament_pla: str = "ALT TABL MATTE PLA PEI.json"
    filament_petg: str = "Alt Tab PETG.json"
    filament_asa: str = "fusrock ASA.json"

    @model_validator(mode="after")
    def validate_profiles_exist(self) -> "SlicerProfileSettings":
        """Validate that all configured profile files exist.

        Skip validation in test environments or when SKIP_PROFILE_VALIDATION is set.
        """
        # Skip validation in test environments
        if os.getenv("PYTEST_CURRENT_TEST") or os.getenv("SKIP_PROFILE_VALIDATION"):
            return self

        profiles_to_check = [
            ("machine", self.machine),
            ("process", self.process),
            ("filament", self.filament_pla),
            ("filament", self.filament_petg),
            ("filament", self.filament_asa),
        ]
        for profile_type, filename in profiles_to_check:
            profile_path = self.base_dir / profile_type / filename
            if not profile_path.exists():
                raise ValueError(
                    f"{profile_type.capitalize()} profile not found at: {profile_path}"
                )
        return self


class Settings(BaseSettings):
    """Application settings."""

    # App settings
    app_name: str = "OrcaSlicer Quotation Machine"
    debug: bool = False

    # Server settings
    host: str = "0.0.0.0"
    port: int = 8000

    # File upload settings
    max_file_size: int = 100 * 1024 * 1024  # 100MB
    upload_dir: str = "uploads"
    allowed_extensions: list[str] = [".stl", ".obj", ".step", ".stp"]

    # OrcaSlicer settings
    orcaslicer_cli_path: str = (
        "/var/lib/flatpak/exports/bin/io.github.softfever.OrcaSlicer"
    )
    slicer_timeout: int = 300  # 5 minutes
    slicer_profiles: SlicerProfileSettings | None = None

    # Pricing settings
    default_price_per_kg: float = 25.0  # S$25/kg for PLA
    price_multiplier: float = 1.1  # 10% markup
    minimum_price: float = 5.0  # S$5 minimum
    additional_time_hours: float = 0.5  # Add 30 minutes to print time

    # Material pricing (per kg)
    material_prices: dict = {
        "PLA": 25.0,
        "PETG": 30.0,
        "ASA": 35.0,
    }

    # Redis/Celery settings
    redis_url: str = "redis://localhost:6379/0"
    celery_broker_url: str = "redis://localhost:6379/0"
    celery_result_backend: str = "redis://localhost:6379/0"

    # Telegram bot settings
    telegram_bot_token: str | None = None
    telegram_admin_chat_id: str | None = None

    # Security
    secret_key: str  # Must be set via environment variable

    model_config = SettingsConfigDict(
        env_file=".env",
        case_sensitive=False,
        env_nested_delimiter="__",
    )

    @model_validator(mode="after")
    def initialize_slicer_profiles(self) -> "Settings":
        """Initialize slicer profiles if not already set."""
        if self.slicer_profiles is None:
            self.slicer_profiles = SlicerProfileSettings()
        return self

    @field_validator("upload_dir")
    @classmethod
    def validate_upload_dir(cls: type["Settings"], dir_path: str) -> str:
        """Validate the upload directory path.

        Note: Directory creation is handled during application startup,
        not during configuration validation.
        """
        return dir_path

    @field_validator("allowed_extensions")
    @classmethod
    def normalize_extensions(cls: type["Settings"], extensions: list[str]) -> list[str]:
        """Normalize file extensions to lowercase with dots."""
        return [
            ext.lower() if ext.startswith(".") else f".{ext.lower()}"
            for ext in extensions
        ]


@lru_cache
def get_settings() -> Settings:
    """Get cached settings instance."""
    return Settings()
</file>

<file path="app/models/__init__.py">
"""Data models for the application."""
</file>

<file path="app/models/quote.py">
"""Quote-related data models."""

import re
from datetime import datetime
from enum import Enum

from pydantic import BaseModel, Field, computed_field, field_validator


class MaterialType(str, Enum):
    """Available material types."""

    PLA = "PLA"
    PETG = "PETG"
    ASA = "ASA"


class QuoteStatus(str, Enum):
    """Quote request status."""

    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"


class QuoteRequest(BaseModel):
    """Quote request from user."""

    name: str = Field(..., min_length=1, max_length=100)
    mobile: str = Field(..., min_length=8, max_length=20)
    material: MaterialType | None = None
    color: str | None = Field(None, max_length=50)
    filename: str = Field(..., min_length=1)

    @field_validator("mobile")
    @classmethod
    def validate_mobile(cls: type["QuoteRequest"], v: str) -> str:
        """Validate mobile number format."""
        # Remove spaces and common separators
        clean_mobile = re.sub(r"[\s\-\(\)\.]+", "", v)

        # Check if it's a valid phone number (basic validation)
        if not re.match(r"^\+?[\d]{8,15}$", clean_mobile):
            raise ValueError("Invalid mobile number format")

        return clean_mobile

    @field_validator("name")
    @classmethod
    def validate_name(cls: type["QuoteRequest"], v: str) -> str:
        """Validate name contains only allowed characters."""
        # Check if empty after stripping
        stripped = v.strip()
        if not stripped:
            raise ValueError("Name cannot be empty")

        # Reject names with numbers or most special characters
        # Allow letters (including Unicode), spaces, hyphens, dots, apostrophes
        if re.search(r"[\d@#$%^&*()+=\[\]{}|\\:;\"<>?/~`]", stripped):
            raise ValueError("Name contains invalid characters")
        return stripped


class SlicingResult(BaseModel):
    """Results from OrcaSlicer."""

    print_time_minutes: int = Field(..., ge=0)
    filament_weight_grams: float = Field(..., ge=0)
    layer_count: int | None = None
    estimated_cost: float | None = None


class QuoteResponse(BaseModel):
    """Complete quote response."""

    request_id: str
    name: str
    mobile: str
    material: str | None
    color: str | None
    filename: str

    # Slicing results
    print_time_minutes: int
    filament_weight_grams: float

    # Pricing
    material_cost: float
    time_cost: float
    total_cost: float

    # Metadata
    status: QuoteStatus
    created_at: datetime
    processed_at: datetime | None = None

    @computed_field  # type: ignore[prop-decorator]
    @property
    def print_time_hours(self: "QuoteResponse") -> float:
        """Calculate hours from minutes."""
        return self.print_time_minutes / 60.0


class TelegramMessage(BaseModel):
    """Telegram message data."""

    quote_id: str
    customer_name: str
    customer_mobile: str
    material: str | None
    color: str | None
    filename: str
    print_time: str
    filament_weight: str
    total_cost: float

    def format_message(self: "TelegramMessage") -> str:
        """Format message for Telegram."""
        material_display = self.material or "PLA (default)"
        color_info = f" - {self.color}" if self.color else ""

        return f"""New Quote Request #{self.quote_id}

Customer: {self.customer_name}
WhatsApp: {self.customer_mobile}
File: {self.filename}
Material: {material_display}{color_info}

Print Time: {self.print_time}
Filament: {self.filament_weight}
Total Cost: S${self.total_cost:.2f}

Reply to this message to contact the customer directly."""
</file>

<file path="app/services/__init__.py">
"""Service modules for business logic."""
</file>

<file path="app/services/pricing.py">
"""Pricing calculation service."""

from _rust_core import CostBreakdown, SlicingResult, calculate_quote_rust

from app.core.config import get_settings
from app.models.quote import MaterialType


class PricingService:
    """Service for calculating print costs."""

    def __init__(self: "PricingService") -> None:
        self.settings = get_settings()

    def calculate_quote(
        self: "PricingService",
        slicing_result: SlicingResult,
        material: MaterialType | None = None,
    ) -> CostBreakdown:
        """
        Calculate pricing for a 3D print job using high-performance Rust implementation.

        Formula: (filament_kg * price_per_kg) * (print_time + 0.5h) * 1.1
        Minimum price: $5

        Args:
            slicing_result: Results from slicing operation
            material: Material type used

        Returns:
            CostBreakdown object with pricing details
        """
        material = material or MaterialType.PLA

        # Get material price per kg
        price_per_kg = self.settings.material_prices.get(
            material.value, self.settings.default_price_per_kg
        )

        # Use Rust implementation for enhanced performance
        return calculate_quote_rust(
            slicing_result.print_time_minutes,
            slicing_result.filament_weight_grams,
            material.value,
            price_per_kg,
            self.settings.additional_time_hours,
            self.settings.price_multiplier,
            self.settings.minimum_price,
        )

    def format_cost_summary(
        self: "PricingService", cost_breakdown: CostBreakdown
    ) -> str:
        """Format cost breakdown for display."""
        material_line = (
            f"Material: {cost_breakdown.filament_grams:.1f}g "
            f"({cost_breakdown.filament_kg:.3f}kg) × "
            f"S${cost_breakdown.price_per_kg:.2f}/kg = "
            f"S${cost_breakdown.material_cost:.2f}"
        )
        time_line = (
            f"Time: {cost_breakdown.print_time_hours:.1f}h × "
            f"S${cost_breakdown.price_per_kg:.2f}/h = "
            f"S${cost_breakdown.time_cost:.2f}"
        )
        return f"""Cost Breakdown:
{material_line}
{time_line}
Subtotal: S${cost_breakdown.subtotal:.2f} (includes {cost_breakdown.markup_percentage:.0f}% markup)
Total: S${cost_breakdown.total_cost:.2f}{"*" if cost_breakdown.minimum_applied else ""}
{"* Minimum price applied" if cost_breakdown.minimum_applied else ""}"""
</file>

<file path="app/services/slicer.py">
"""OrcaSlicer integration service."""

import asyncio
import os
import tempfile
from pathlib import Path

# Import enhanced Rust functions
from _rust_core import SlicingResult, parse_slicer_output

from app.core.config import get_settings
from app.models.quote import MaterialType


class SlicerError(Exception):
    """Custom exception for slicer-related errors."""

    pass


class OrcaSlicerService:
    """Service for interacting with OrcaSlicer CLI."""

    def __init__(self) -> None:
        self.settings = get_settings()
        self.cli_path = self.settings.orcaslicer_cli_path
        self.profiles_dir = self.settings.slicer_profiles.base_dir  # type: ignore[union-attr]
        self.filament_profiles_dir = self.profiles_dir / "filament"

    def _get_filament_profile_path(self, material_name: str) -> Path:
        """
        Gets the path to a filament profile using a hybrid strategy.
        1. Checks for an explicit override in settings (e.g., `filament_pla`).
        2. Falls back to a file-based convention (`material_name.ini`).
        3. Raises a clear error if no profile is found.
        """
        profile_config = self.settings.slicer_profiles
        material_lower = material_name.lower()

        # 1. Check for an explicit override in settings (for official materials)
        config_key = f"filament_{material_lower}"
        if hasattr(profile_config, config_key):
            profile_filename = getattr(profile_config, config_key)
            profile_path = self.filament_profiles_dir / profile_filename
            # The Pydantic validator already checked this at startup, so we can trust it exists.
            return profile_path  # type: ignore[no-any-return]

        # 2. Fallback to file-based convention for custom materials.
        # Convention: material name 'TPU' maps to `tpu.json`.
        conventional_filename = f"{material_lower}.json"
        profile_path = self.filament_profiles_dir / conventional_filename
        if profile_path.exists():
            return profile_path

        # 3. If no profile is found by any method, fail clearly.
        raise SlicerError(
            f"No profile found for material '{material_name}'. "
            f"Looked for config override '{config_key}' and conventional file '{conventional_filename}'."
        )

    def get_profile_paths(
        self, material: MaterialType | str | None = None
    ) -> dict[str, str]:
        """
        Resolves full paths for machine, process, and the correct filament profile.
        Accepts an enum member or a raw string for the material.
        """
        # Default to PLA if no material is provided.
        material_name = getattr(material, "value", material) or MaterialType.PLA.value

        profile_config = self.settings.slicer_profiles
        filament_profile_path = self._get_filament_profile_path(material_name)

        profiles = {
            "machine": self.profiles_dir / "machine" / profile_config.machine,  # type: ignore[union-attr]
            "filament": filament_profile_path,
            "process": self.profiles_dir / "process" / profile_config.process,  # type: ignore[union-attr]
        }

        return {k: str(v.resolve()) for k, v in profiles.items()}

    def get_available_materials(self) -> list[str]:
        """
        Discovers all available materials for populating UI elements.
        Combines official materials from the enum with custom materials
        found as .json files in the filament profile directory.
        """
        # 1. Start with official materials from the enum
        official_materials = {m.value for m in MaterialType}

        # 2. Scan the filesystem for all .json files
        discovered_materials = set()
        if self.filament_profiles_dir.is_dir():
            for f in self.filament_profiles_dir.glob("*.json"):
                # Convert 'generic_tpu.json' -> 'generic_tpu'
                material_name = f.stem.upper()  # Convert to uppercase for consistency
                discovered_materials.add(material_name)

        # 3. Combine, ensuring original casing is preferred, and sort.
        all_materials = sorted(official_materials.union(discovered_materials))
        return all_materials

    async def slice_model(
        self, model_path: str, material: MaterialType | None = None
    ) -> SlicingResult:
        """
        Slice a 3D model and extract print information.

        Args:
            model_path: Path to the 3D model file
            material: Material type to use for slicing

        Returns:
            SlicingResult with print time and filament usage

        Raises:
            SlicerError: If slicing fails
        """
        if not os.path.exists(model_path):
            raise SlicerError(f"Model file not found: {model_path}")

        profiles = self.get_profile_paths(material)

        with tempfile.TemporaryDirectory() as temp_dir:
            output_dir = Path(temp_dir) / "output"
            output_dir.mkdir()

            # Build command
            command = [
                self.cli_path,
                model_path,
                "--slice",
                "0",  # Slice all plates
                "--load-settings",
                f"{profiles['machine']};{profiles['process']}",
                "--load-filaments",
                profiles["filament"],
                "--export-slicedata",
                str(output_dir),
                "--outputdir",
                str(output_dir),
                "--debug",
                "1",  # Minimal logging
            ]

            try:
                # Run slicer process
                process = await asyncio.create_subprocess_exec(
                    *command,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE,
                    cwd=temp_dir,
                )

                stdout, stderr = await asyncio.wait_for(
                    process.communicate(), timeout=self.settings.slicer_timeout
                )

                if process.returncode != 0:
                    error_msg = stderr.decode() if stderr else "Unknown slicer error"
                    raise SlicerError(f"Slicer failed: {error_msg}")

                # Parse results using Rust implementation
                return await parse_slicer_output(str(output_dir))

            except TimeoutError as e:
                raise SlicerError("Slicing operation timed out") from e
            except Exception as e:
                raise SlicerError(f"Slicing failed: {str(e)}") from e
</file>

<file path="app/services/telegram.py">
"""Telegram bot service for admin notifications."""

from telegram import Bot
from telegram.error import TelegramError

from app.core.config import get_settings
from app.models.quote import TelegramMessage


class TelegramService:
    """Service for sending notifications via Telegram bot."""

    def __init__(self) -> None:
        self.settings = get_settings()
        self.bot: Bot | None = None

        if self.settings.telegram_bot_token:
            self.bot = Bot(token=self.settings.telegram_bot_token)

    async def send_quote_notification(self, message: TelegramMessage) -> bool:
        """
        Send quote notification to admin via Telegram.

        Args:
            message: Telegram message data

        Returns:
            True if sent successfully, False otherwise
        """
        if not self.bot or not self.settings.telegram_admin_chat_id:
            print("Telegram bot not configured - notification not sent")
            return False

        try:
            formatted_message = message.format_message()

            await self.bot.send_message(
                chat_id=self.settings.telegram_admin_chat_id,
                text=formatted_message,
                parse_mode="HTML",
            )

            print(f"Quote notification sent for {message.quote_id}")
            return True

        except TelegramError as e:
            print(f"Failed to send Telegram notification: {e}")
            return False
        except Exception as e:
            print(f"Unexpected error sending Telegram notification: {e}")
            return False

    async def send_error_notification(self, error_message: str, quote_id: str) -> bool:
        """Send error notification to admin."""
        if not self.bot or not self.settings.telegram_admin_chat_id:
            return False

        try:
            message = f"Quote Processing Error #{quote_id}\n\n{error_message}"

            await self.bot.send_message(
                chat_id=self.settings.telegram_admin_chat_id, text=message
            )

            return True

        except Exception as e:
            print(f"Failed to send error notification: {e}")
            return False

    async def test_connection(self) -> bool:
        """Test Telegram bot connection."""
        if not self.bot:
            return False

        try:
            bot_info = await self.bot.get_me()
            print(f"Telegram bot connected: @{bot_info.username}")
            return True
        except Exception as e:
            print(f"Telegram bot connection failed: {e}")
            return False
</file>

<file path="app/__init__.py">
"""
OrcaSlicer Quotation Machine

A web application for generating 3D printing quotations using OrcaSlicer.
"""

__version__ = "0.1.0"
</file>

<file path="app/main.py">
"""FastAPI application for OrcaSlicer quotation machine."""

import contextlib
import os
import re
import uuid
from pathlib import Path
from typing import Any

import aiofiles
from fastapi import FastAPI, File, Form, HTTPException, Request, UploadFile, status
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from starlette.responses import Response

from app.core.config import get_settings
from app.models.quote import MaterialType, QuoteRequest
from app.services.slicer import OrcaSlicerService
from app.tasks import celery_app, process_quote_request

settings = get_settings()

# Initialize FastAPI app
app = FastAPI(
    title=settings.app_name,
    description="Generate 3D printing quotations using OrcaSlicer",
    version="0.1.0",
    debug=settings.debug,
)

# Mount static files and templates
# Skip static mounting during testing to avoid RuntimeError
if not os.getenv("PYTEST_CURRENT_TEST"):
    app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# Ensure upload directory exists
Path(settings.upload_dir).mkdir(exist_ok=True)


def secure_filename(filename: str) -> str:
    """Sanitizes a filename to prevent path traversal attacks."""
    if not filename:
        return ""

    # Keep only alphanumeric, dots, dashes, and underscores
    filename = re.sub(r"[^a-zA-Z0-9._-]", "", filename)

    # Prevent path traversal by removing leading dots or slashes
    filename = filename.lstrip("./\\")

    # Ensure we don't have an empty filename
    if not filename:
        return "unnamed_file"

    return filename


@app.get("/", response_class=HTMLResponse)
async def home(request: Request) -> Response:
    """Home page with quote request form."""
    # Get available materials from slicer service (includes custom materials)
    try:
        slicer_service = OrcaSlicerService()
        available_materials = slicer_service.get_available_materials()
    except Exception:
        # Fallback to enum values if slicer service fails
        available_materials = [material.value for material in MaterialType]

    return templates.TemplateResponse(
        "index.html",
        {
            "request": request,
            "materials": available_materials,
            "max_file_size_mb": settings.max_file_size // (1024 * 1024),
            "allowed_extensions": ", ".join(settings.allowed_extensions),
        },
    )


@app.post("/quote")
async def create_quote(
    name: str = Form(..., min_length=1, max_length=100),
    mobile: str = Form(..., min_length=8, max_length=20),
    material: str | None = Form(None),
    color: str | None = Form(None, max_length=50),
    model_file: UploadFile = File(...),
) -> JSONResponse:
    """
    Create a new quote request.

    Accepts form data and uploads the 3D model file.
    Starts background processing and returns immediately.
    """

    # Validate file
    if not model_file.filename:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, detail="No file provided"
        )

    file_ext = Path(model_file.filename).suffix.lower()
    if file_ext not in settings.allowed_extensions:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"File type {file_ext} not allowed. Supported: {', '.join(settings.allowed_extensions)}",
        )

    # Validate material against available materials (including custom ones)
    if material:
        try:
            slicer_service = OrcaSlicerService()
            available_materials = slicer_service.get_available_materials()
            if material.upper() not in available_materials:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"Invalid material. Supported: {', '.join(available_materials)}",
                )
        except Exception:
            # Fallback to enum validation if slicer service fails
            if material.upper() not in [m.value for m in MaterialType]:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"Invalid material. Supported: {', '.join([m.value for m in MaterialType])}",
                ) from None

    # Sanitize filename to prevent path traversal
    safe_filename = secure_filename(model_file.filename)
    if not safe_filename:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid filename"
        )

    try:
        # Validate quote request data
        quote_request = QuoteRequest(
            name=name,
            mobile=mobile,
            material=MaterialType(material.upper()) if material else None,
            color=color,
            filename=safe_filename,
        )
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, detail=str(e)
        ) from e

    # Save uploaded file with size validation during write
    file_id = str(uuid.uuid4())
    file_path = Path(settings.upload_dir) / f"{file_id}_{safe_filename}"

    written_bytes = 0
    try:
        async with aiofiles.open(file_path, "wb") as f:
            while chunk := await model_file.read(8192):  # Read in 8KB chunks
                written_bytes += len(chunk)
                if written_bytes > settings.max_file_size:
                    # Clean up partial file
                    await f.close()
                    if file_path.exists():
                        os.remove(file_path)
                    raise HTTPException(
                        status_code=status.HTTP_413_REQUEST_ENTITY_TOO_LARGE,
                        detail=f"File too large. Maximum size: {settings.max_file_size // (1024 * 1024)}MB",
                    )
                await f.write(chunk)
    except HTTPException:
        raise  # Re-raise HTTP exceptions
    except Exception as e:
        # Clean up file if it exists
        if file_path.exists():
            with contextlib.suppress(Exception):
                os.remove(file_path)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to save file: {str(e)}",
        ) from e

    # Start background processing
    try:
        task = process_quote_request.delay(
            file_path=str(file_path),
            quote_data=quote_request.model_dump(),
            material=material,
        )

        return JSONResponse(
            status_code=status.HTTP_202_ACCEPTED,
            content={
                "message": "Quote request received and is being processed",
                "task_id": task.id,
                "customer_name": quote_request.name,
                "filename": quote_request.filename,
                "material": material or "PLA (default)",
                "estimated_processing_time": "2-5 minutes",
            },
        )

    except Exception as e:
        # Cleanup file if task creation fails
        with contextlib.suppress(Exception):
            os.remove(file_path)

        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to start processing: {str(e)}",
        ) from e


@app.get("/health")
async def health_check() -> dict[str, str]:
    """Health check endpoint."""
    return {"status": "healthy", "app_name": settings.app_name, "version": "0.1.0"}


@app.get("/status/{task_id}")
async def get_task_status(task_id: str) -> dict[str, Any]:
    """Get the status of a background task."""
    task_result = celery_app.AsyncResult(task_id)

    if task_result.state == "PENDING":
        return {
            "task_id": task_id,
            "status": "processing",
            "message": "Task is being processed...",
        }
    elif task_result.state == "SUCCESS":
        result = task_result.result
        return {"task_id": task_id, "status": "completed", "result": result}
    elif task_result.state == "FAILURE":
        return {"task_id": task_id, "status": "failed", "error": str(task_result.info)}
    else:
        return {
            "task_id": task_id,
            "status": task_result.state,
            "message": "Task state: " + task_result.state,
        }


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        "app.main:app", host=settings.host, port=settings.port, reload=settings.debug
    )
</file>

<file path="app/tasks.py">
"""Celery tasks for background processing."""

import asyncio
import contextlib
import os
import uuid
from datetime import datetime
from typing import Any

# Import Rust functions
from _rust_core import cleanup_old_files_rust, validate_3d_model
from celery import Celery, Task
from celery.utils.log import get_task_logger

from app.core.config import get_settings
from app.models.quote import MaterialType, TelegramMessage
from app.services.pricing import PricingService
from app.services.slicer import OrcaSlicerService
from app.services.telegram import TelegramService

settings = get_settings()
logger = get_task_logger(__name__)

# Initialize Celery with test-aware configuration
if os.getenv("PYTEST_CURRENT_TEST") or os.getenv("CELERY_TASK_ALWAYS_EAGER"):
    # Use in-memory broker for testing
    celery_app = Celery(
        "orca_quote_machine",
        broker="memory://",
        backend="rpc://",
    )
else:
    # Use Redis for production
    celery_app = Celery(
        "orca_quote_machine",
        broker=settings.celery_broker_url,
        backend=settings.celery_result_backend,
    )

# Configure Celery settings
celery_config = {
    "task_serializer": "json",
    "accept_content": ["json"],
    "result_serializer": "json",
    "timezone": "UTC",
    "enable_utc": True,
}

# Add eager mode for testing
if os.getenv("PYTEST_CURRENT_TEST") or os.getenv("CELERY_TASK_ALWAYS_EAGER"):
    celery_config.update(
        {
            "task_always_eager": True,
            "task_eager_propagates": True,
        }
    )

celery_app.conf.update(**celery_config)


@celery_app.task(bind=True)
def process_quote_request(
    self: Task, file_path: str, quote_data: dict, material: str | None = None
) -> dict:
    """
    Process a quote request in the background.

    Args:
        file_path: Path to uploaded 3D model file
        quote_data: Quote request data
        material: Material type (PLA, PETG, ASA)

    Returns:
        Dictionary with processing results
    """
    quote_id = str(uuid.uuid4())
    short_quote_id = quote_id[:8]

    logger.info(f"Processing quote {short_quote_id} for file {file_path}")

    try:
        # Validate file using Rust
        validation_result = validate_3d_model(file_path)
        if not validation_result.is_valid:
            raise Exception(f"Invalid 3D model: {validation_result.error_message}")
        logger.info(f"File validation passed: {validation_result.file_type}")

        # Parse material
        material_enum = None
        if material:
            try:
                material_enum = MaterialType(material.upper())
            except ValueError:
                logger.warning(f"Unknown material {material}, defaulting to PLA")
                material_enum = MaterialType.PLA

        # Run async processing pipeline
        result = asyncio.run(
            run_processing_pipeline(
                file_path, quote_data, material_enum, quote_id, short_quote_id
            )
        )
        return result

    except Exception as e:
        error_msg = str(e)
        logger.error(f"Quote processing failed for {short_quote_id}: {error_msg}")

        # Send error notification
        with contextlib.suppress(Exception):
            asyncio.run(send_failure_notification(error_msg, short_quote_id))

        return {
            "success": False,
            "quote_id": quote_id,
            "error": error_msg,
            "processed_at": datetime.utcnow().isoformat(),
        }

    finally:
        # Cleanup uploaded file
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                logger.info(f"Cleaned up file: {file_path}")
        except Exception as e:
            logger.warning(f"Failed to cleanup file {file_path}: {e}")


async def run_processing_pipeline(
    file_path: str,
    quote_data: dict,
    material_enum: MaterialType | None,
    quote_id: str,
    short_quote_id: str,
) -> dict[str, Any]:
    """
    Helper async function to orchestrate async calls in the processing pipeline.
    """
    # Run slicing
    slicer_service = OrcaSlicerService()
    slicing_result = await slicer_service.slice_model(file_path, material_enum)
    logger.info(
        f"Slicing completed: {slicing_result.print_time_minutes}min, {slicing_result.filament_weight_grams}g"
    )

    # Calculate pricing
    pricing_service = PricingService()
    cost_breakdown = pricing_service.calculate_quote(slicing_result, material_enum)
    logger.info(f"Pricing calculated: S${cost_breakdown.total_cost:.2f}")

    # Send Telegram notification
    telegram_service = TelegramService()
    telegram_message = TelegramMessage(
        quote_id=short_quote_id,
        customer_name=quote_data["name"],
        customer_mobile=quote_data["mobile"],
        material=material_enum.value if material_enum else None,
        color=quote_data.get("color"),
        filename=quote_data["filename"],
        print_time=f"{slicing_result.print_time_minutes // 60}h {slicing_result.print_time_minutes % 60}m",
        filament_weight=f"{slicing_result.filament_weight_grams:.1f}g",
        total_cost=cost_breakdown.total_cost,
    )

    notification_sent = await telegram_service.send_quote_notification(telegram_message)

    return {
        "success": True,
        "quote_id": quote_id,
        "slicing_result": {
            "print_time_minutes": slicing_result.print_time_minutes,
            "filament_weight_grams": slicing_result.filament_weight_grams,
        },
        "cost_breakdown": {
            "material_type": cost_breakdown.material_type,
            "total_cost": cost_breakdown.total_cost,
            "filament_kg": cost_breakdown.filament_kg,
            "print_time_hours": cost_breakdown.print_time_hours,
            "minimum_applied": cost_breakdown.minimum_applied,
        },
        "notification_sent": notification_sent,
        "processed_at": datetime.utcnow().isoformat(),
    }


async def send_failure_notification(error_msg: str, quote_id: str) -> None:
    """Send error notification to admin."""
    telegram_service = TelegramService()
    await telegram_service.send_error_notification(error_msg, quote_id)


@celery_app.task
def cleanup_old_files(max_age_hours: int = 24) -> dict[str, Any]:
    """
    Cleanup old uploaded files using high-performance Rust implementation.

    Args:
        max_age_hours: Maximum age of files to keep

    Returns:
        Cleanup statistics
    """
    try:
        stats = cleanup_old_files_rust(settings.upload_dir, max_age_hours)
        logger.info(
            f"Cleaned up {stats.files_cleaned} old files, freeing {stats.bytes_freed} bytes."
        )

        return {
            "success": True,
            "files_cleaned": stats.files_cleaned,
            "bytes_freed": stats.bytes_freed,
        }

    except Exception as e:
        logger.error(f"File cleanup failed: {e}")
        return {
            "success": False,
            "error": str(e),
        }
</file>

<file path="scripts/format.sh">
#!/bin/bash
set -e

echo "Formatting code with ruff"

# Check if uv environment exists
if [ ! -d ".venv" ]; then
    echo "ERROR: uv environment not found. Run ./scripts/setup.sh first"
    exit 1
fi

echo "Running ruff linting..."
uv run ruff check --fix .

echo "Running ruff formatting..."
uv run ruff format .

echo "Running mypy type checks..."
uv run mypy app/ --ignore-missing-imports

echo "Code formatting complete!"
</file>

<file path="scripts/production-server.sh">
#!/bin/bash
set -e

echo "Starting OrcaSlicer Quotation Machine production server"

# Check if uv environment exists
if [ ! -d ".venv" ]; then
    echo "ERROR: uv environment not found. Run ./scripts/setup.sh first"
    exit 1
fi

# Check if Redis is running
if ! redis-cli ping &> /dev/null; then
    echo "ERROR: Redis is not running. Please start it first:"
    echo "redis-server"
    exit 1
fi

echo "Environment: $(cat .env | grep DEBUG || echo 'DEBUG=false')"
echo "Starting FastAPI production server..."

uv run uvicorn app.main:app \
    --host 0.0.0.0 \
    --port 8000 \
    --workers 4 \
    --log-level warning \
    --access-log
</file>

<file path="scripts/setup.sh">
#!/bin/bash
set -e

echo "Setting up OrcaSlicer Quotation Machine with uv"

# Check if uv is installed
if ! command -v uv &> /dev/null; then
    echo "ERROR: uv is not installed. Please install it first:"
    echo "curl -LsSf https://astral.sh/uv/install.sh | sh"
    exit 1
fi

# Check if rust is installed
if ! command -v cargo &> /dev/null; then
    echo "ERROR: Rust is not installed. Please install it first:"
    echo "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
    exit 1
fi

echo "Creating uv environment and installing dependencies..."
uv sync --group dev

echo "Building Rust components..."
uv run maturin develop

echo "Creating necessary directories..."
mkdir -p uploads static config/slicer_profiles/{machine,filament,process}

echo "Setting up environment file..."
if [ ! -f .env ]; then
    cp example.env .env
    echo "Please edit .env with your configuration"
else
    echo ".env already exists"
fi

echo "Running basic tests..."
uv run python -c "
try:
    from orca_quote_machine._rust_core import validate_3d_model
    print('Rust components loaded successfully')
except ImportError as e:
    print(f'ERROR: Rust components failed to load: {e}')

try:
    from app.core.config import get_settings
    settings = get_settings()
    print(f'Configuration loaded: {settings.app_name}')
except Exception as e:
    print(f'ERROR: Configuration failed: {e}')
"

echo ""
echo "Setup complete!"
echo ""
echo "Next steps:"
echo "1. Edit .env with your configuration"
echo "2. Set up OrcaSlicer profiles in config/slicer_profiles/"
echo "3. Start Redis: redis-server"
echo "4. Start Celery worker: uv run celery -A app.tasks worker --loglevel=info"
echo "5. Start the app: uv run uvicorn app.main:app --reload"
echo ""
echo "Or use the provided scripts:"
echo "- ./scripts/web-server.sh       - Start web server (development)"
echo "- ./scripts/production-server.sh - Start web server (production)"
echo "- ./scripts/worker.sh           - Start Celery worker"
echo "- ./scripts/test.sh             - Run tests"
</file>

<file path="scripts/test.sh">
#!/bin/bash
set -e

echo "Running tests for OrcaSlicer Quotation Machine"

# Check if uv environment exists
if [ ! -d ".venv" ]; then
    echo "ERROR: uv environment not found. Run ./scripts/setup.sh first"
    exit 1
fi

echo "Running Python tests..."
uv run pytest -v

echo "Testing Rust components..."
uv run python -c "
from orca_quote_machine._rust_core import validate_3d_model
import tempfile
import os

# Test with the PoC STL file
if os.path.exists('test_cube.stl'):
    result = validate_3d_model('test_cube.stl')
    print(f'STL validation: {result.is_valid} ({result.file_type}, {result.file_size} bytes)')
else:
    print('WARNING: test_cube.stl not found, skipping validation test')
"

echo "Testing OrcaSlicer CLI..."
uv run python poc_orcaslicer.py

echo "Testing configuration..."
uv run python -c "
from app.core.config import get_settings
from app.services.pricing import PricingService
from app.models.quote import SlicingResult

settings = get_settings()
print(f'Config loaded: {settings.app_name}')

# Test pricing calculation
pricing = PricingService()
mock_result = SlicingResult(print_time_minutes=90, filament_weight_grams=25.5)
cost = pricing.calculate_quote(mock_result)
print(f'Pricing test: {cost[\"total_cost\"]:.2f} SGD')
"

echo "All tests completed!"
</file>

<file path="scripts/web-server.sh">
#!/bin/bash
set -e

echo "Starting OrcaSlicer Quotation Machine web server"

# Check if uv environment exists
if [ ! -d ".venv" ]; then
    echo "ERROR: uv environment not found. Run ./scripts/setup.sh first"
    exit 1
fi

# Check if Redis is running
if ! redis-cli ping &> /dev/null; then
    echo "WARNING: Redis is not running. Starting redis-server..."
    redis-server --daemonize yes
    sleep 2
fi

echo "Environment: $(cat .env | grep DEBUG || echo 'DEBUG=true')"
echo "Starting FastAPI web server..."

uv run uvicorn app.main:app \
    --reload \
    --host 0.0.0.0 \
    --port 8000 \
    --log-level info
</file>

<file path="scripts/worker.sh">
#!/bin/bash
set -e

echo "Starting Celery worker for background processing"

# Check if uv environment exists
if [ ! -d ".venv" ]; then
    echo "ERROR: uv environment not found. Run ./scripts/setup.sh first"
    exit 1
fi

# Check if Redis is running
if ! redis-cli ping &> /dev/null; then
    echo "ERROR: Redis is not running. Please start it first:"
    echo "redis-server"
    exit 1
fi

echo "Starting Celery worker..."

uv run celery -A app.tasks worker \
    --loglevel=info \
    --concurrency=2 \
    --hostname=worker@%h
</file>

<file path="src/lib.rs">
use pyo3::prelude::*;
use pyo3_asyncio::tokio::future_into_py;
use regex::Regex;
use std::fs;
use std::io::{BufRead, BufReader, Read, Seek, SeekFrom};
use std::path::{Path, PathBuf};
use std::time::{Duration, SystemTime};
use thiserror::Error;
use tokio::fs::File;
use tokio::io::{AsyncBufReadExt, BufReader as AsyncBufReader};

#[derive(Error, Debug)]
pub enum ValidationError {
    #[error("File not found: {0}")]
    FileNotFound(String),
    #[error("Invalid file format: {0}")]
    InvalidFormat(String),
    #[error("IO error: {0}")]
    IoError(#[from] std::io::Error),
}

impl From<ValidationError> for PyErr {
    fn from(err: ValidationError) -> PyErr {
        pyo3::exceptions::PyValueError::new_err(err.to_string())
    }
}

#[derive(Debug, Clone)]
#[pyclass]
pub struct ModelInfo {
    #[pyo3(get)]
    pub file_type: String,
    #[pyo3(get)]
    pub file_size: u64,
    #[pyo3(get)]
    pub is_valid: bool,
    #[pyo3(get)]
    pub error_message: Option<String>,
}

#[pymethods]
impl ModelInfo {
    fn __str__(&self) -> String {
        format!(
            "ModelInfo(type={}, size={}, valid={}, error={:?})",
            self.file_type, self.file_size, self.is_valid, self.error_message
        )
    }
}

/// Fast validation for STL files
#[pyfunction]
fn validate_stl(file_path: String) -> PyResult<ModelInfo> {
    let path = Path::new(&file_path);
    
    if !path.exists() {
        return Ok(ModelInfo {
            file_type: "stl".to_string(),
            file_size: 0,
            is_valid: false,
            error_message: Some("File not found".to_string()),
        });
    }

    let file_size = fs::metadata(path)?.len();
    
    // Read first few bytes to determine if binary or ASCII STL
    let data = fs::read(path)?;
    
    if data.len() < 84 {
        return Ok(ModelInfo {
            file_type: "stl".to_string(),
            file_size,
            is_valid: false,
            error_message: Some("File too small to be valid STL".to_string()),
        });
    }

    // Check if it's ASCII STL (starts with "solid")
    if data.starts_with(b"solid") {
        // For ASCII STL, use buffered reading to avoid loading entire file
        let file = fs::File::open(path)?;
        let reader = BufReader::new(file);
        
        let mut found_endsolid = false;
        for line in reader.lines() {
            let line = line?;
            if line.trim().starts_with("endsolid") {
                found_endsolid = true;
                break;
            }
        }
        
        return Ok(ModelInfo {
            file_type: "stl".to_string(),
            file_size,
            is_valid: found_endsolid,
            error_message: if found_endsolid { None } else { Some("Invalid ASCII STL format - missing endsolid".to_string()) },
        });
    }

    // Binary STL validation
    if data.len() < 84 {
        return Ok(ModelInfo {
            file_type: "stl".to_string(),
            file_size,
            is_valid: false,
            error_message: Some("Binary STL too small".to_string()),
        });
    }

    // Read triangle count from bytes 80-83
    let triangle_count = u32::from_le_bytes([data[80], data[81], data[82], data[83]]);
    let expected_size = 80 + 4 + (triangle_count * 50); // Header + count + triangles

    if data.len() as u32 != expected_size {
        return Ok(ModelInfo {
            file_type: "stl".to_string(),
            file_size,
            is_valid: false,
            error_message: Some(format!(
                "Binary STL size mismatch. Expected {}, got {}",
                expected_size,
                data.len()
            )),
        });
    }

    Ok(ModelInfo {
        file_type: "stl".to_string(),
        file_size,
        is_valid: true,
        error_message: None,
    })
}

/// Basic validation for OBJ files
#[pyfunction]
fn validate_obj(file_path: String) -> PyResult<ModelInfo> {
    let path = Path::new(&file_path);
    
    if !path.exists() {
        return Ok(ModelInfo {
            file_type: "obj".to_string(),
            file_size: 0,
            is_valid: false,
            error_message: Some("File not found".to_string()),
        });
    }

    let file_size = fs::metadata(path)?.len();
    let file = fs::File::open(path)?;
    let reader = BufReader::new(file);
    
    // Basic OBJ validation - check for vertices and faces using buffered reading
    let mut has_vertices = false;
    let mut has_faces = false;
    
    for line in reader.lines() {
        let line = line?;
        let trimmed = line.trim();
        
        if trimmed.starts_with("v ") {
            has_vertices = true;
        } else if trimmed.starts_with("f ") {
            has_faces = true;
        }
        
        // Early exit once both are found
        if has_vertices && has_faces {
            break;
        }
    }
    
    if has_vertices && has_faces {
        Ok(ModelInfo {
            file_type: "obj".to_string(),
            file_size,
            is_valid: true,
            error_message: None,
        })
    } else {
        Ok(ModelInfo {
            file_type: "obj".to_string(),
            file_size,
            is_valid: false,
            error_message: Some("Invalid OBJ format - missing vertices or faces".to_string()),
        })
    }
}

/// Basic validation for STEP files
#[pyfunction]
fn validate_step(file_path: String) -> PyResult<ModelInfo> {
    let path = Path::new(&file_path);
    
    if !path.exists() {
        return Ok(ModelInfo {
            file_type: "step".to_string(),
            file_size: 0,
            is_valid: false,
            error_message: Some("File not found".to_string()),
        });
    }

    let file_size = fs::metadata(path)?.len();
    let file = fs::File::open(path)?;
    let reader = BufReader::new(file);
    
    // Basic STEP validation - check for required headers using buffered reading
    let mut has_iso_header = false;
    let mut has_header_section = false;
    let mut has_data_section = false;
    let mut has_end_iso = false;
    let mut first_line = true;
    
    for line in reader.lines() {
        let line = line?;
        let trimmed = line.trim();
        
        // Check first line for ISO header
        if first_line {
            has_iso_header = trimmed.starts_with("ISO-10303");
            first_line = false;
        }
        
        // Check for required sections
        if trimmed == "HEADER;" {
            has_header_section = true;
        } else if trimmed == "DATA;" {
            has_data_section = true;
        } else if trimmed.starts_with("END-ISO-10303") {
            has_end_iso = true;
            break; // This should be near the end, so we can stop here
        }
    }
    
    if has_iso_header && has_header_section && has_data_section && has_end_iso {
        Ok(ModelInfo {
            file_type: "step".to_string(),
            file_size,
            is_valid: true,
            error_message: None,
        })
    } else {
        let mut missing_parts = Vec::new();
        if !has_iso_header { missing_parts.push("ISO header"); }
        if !has_header_section { missing_parts.push("HEADER section"); }
        if !has_data_section { missing_parts.push("DATA section"); }
        if !has_end_iso { missing_parts.push("END-ISO section"); }
        
        Ok(ModelInfo {
            file_type: "step".to_string(),
            file_size,
            is_valid: false,
            error_message: Some(format!("Invalid STEP format - missing: {}", missing_parts.join(", "))),
        })
    }
}

/// Validate 3D model file based on extension
#[pyfunction]
fn validate_3d_model(file_path: String) -> PyResult<ModelInfo> {
    let path = Path::new(&file_path);
    
    match path.extension().and_then(|ext| ext.to_str()) {
        Some("stl") | Some("STL") => validate_stl(file_path),
        Some("obj") | Some("OBJ") => validate_obj(file_path),
        Some("step") | Some("STEP") | Some("stp") | Some("STP") => validate_step(file_path),
        _ => Ok(ModelInfo {
            file_type: "unknown".to_string(),
            file_size: 0,
            is_valid: false,
            error_message: Some("Unsupported file type".to_string()),
        }),
    }
}

/// Enhanced slicing result with performance-critical calculations in Rust
#[derive(Debug, Clone)]
#[pyclass]
pub struct SlicingResult {
    #[pyo3(get)]
    pub print_time_minutes: u32,
    #[pyo3(get)]
    pub filament_weight_grams: f32,
    #[pyo3(get)]
    pub layer_count: Option<u32>,
}

#[pymethods]
impl SlicingResult {
    fn __str__(&self) -> String {
        format!(
            "SlicingResult(time={}min, filament={:.1}g, layers={:?})",
            self.print_time_minutes, self.filament_weight_grams, self.layer_count
        )
    }
}

/// File cleanup statistics
#[derive(Debug, Clone)]
#[pyclass]
pub struct CleanupStats {
    #[pyo3(get)]
    pub files_cleaned: u32,
    #[pyo3(get)]
    pub bytes_freed: u64,
}

#[pymethods]
impl CleanupStats {
    fn __str__(&self) -> String {
        format!(
            "CleanupStats(files={}, bytes={})",
            self.files_cleaned, self.bytes_freed
        )
    }
}

/// Cost breakdown calculation performed in Rust for enhanced performance
#[derive(Debug, Clone)]
#[pyclass]
pub struct CostBreakdown {
    #[pyo3(get)]
    pub material_type: String,
    #[pyo3(get)]
    pub filament_kg: f64,
    #[pyo3(get)]
    pub filament_grams: f32,
    #[pyo3(get)]
    pub print_time_hours: f64,
    #[pyo3(get)]
    pub print_time_minutes: u32,
    #[pyo3(get)]
    pub price_per_kg: f64,
    #[pyo3(get)]
    pub material_cost: f64,
    #[pyo3(get)]
    pub time_cost: f64,
    #[pyo3(get)]
    pub subtotal: f64,
    #[pyo3(get)]
    pub total_cost: f64,
    #[pyo3(get)]
    pub minimum_applied: bool,
    #[pyo3(get)]
    pub markup_percentage: f64,
}

#[pymethods]
impl CostBreakdown {
    fn __str__(&self) -> String {
        format!(
            "CostBreakdown(material={}, total=S${:.2})",
            self.material_type, self.total_cost
        )
    }
}

/// Parse time string to minutes using Rust regex for performance
fn parse_time_string_to_minutes(time_str: &str) -> u32 {
    // Create regexes for common time formats
    let hour_regex = Regex::new(r"(\d+)h").unwrap();
    let minute_regex = Regex::new(r"(\d+)m").unwrap();
    let minute_only_regex = Regex::new(r"^(\d+)$").unwrap();
    
    let clean_str = time_str.trim().to_lowercase();
    let mut minutes = 0;
    
    // Parse "1h 30m" format
    if let Some(hour_cap) = hour_regex.captures(&clean_str) {
        if let Ok(hours) = hour_cap[1].parse::<u32>() {
            minutes += hours * 60;
        }
    }
    
    if let Some(min_cap) = minute_regex.captures(&clean_str) {
        if let Ok(mins) = min_cap[1].parse::<u32>() {
            minutes += mins;
        }
    }
    
    // Parse minutes-only format if no hours/minutes pattern found
    if minutes == 0 {
        if let Some(min_only_cap) = minute_only_regex.captures(&clean_str) {
            if let Ok(mins) = min_only_cap[1].parse::<u32>() {
                minutes = mins;
            }
        }
    }
    
    if minutes == 0 { 60 } else { minutes } // Default to 1 hour if parsing fails
}

/// Parse filament weight from G-code comment using Rust regex
fn parse_filament_weight(line: &str) -> Option<f32> {
    let weight_regex = Regex::new(r"(\d+\.?\d*)\s*g").unwrap();
    
    if let Some(cap) = weight_regex.captures(line) {
        cap[1].parse::<f32>().ok()
    } else {
        None
    }
}

/// High-performance G-code and metadata parsing in Rust
#[pyfunction]
fn parse_slicer_output(py: Python, output_dir: String) -> PyResult<&PyAny> {
    future_into_py(py, async move {
        let dir_path = PathBuf::from(output_dir);
        let mut gcode_path: Option<PathBuf> = None;
        
        // Find the first .gcode file
        let mut entries = tokio::fs::read_dir(&dir_path).await?;
        while let Some(entry) = entries.next_entry().await? {
            if entry.path().extension().and_then(|s| s.to_str()) == Some("gcode") {
                gcode_path = Some(entry.path());
                break;
            }
        }
        
        let gcode_path = gcode_path.ok_or_else(|| {
            std::io::Error::new(std::io::ErrorKind::NotFound, "No .gcode file found")
        })?;
        
        let file = File::open(gcode_path).await?;
        let reader = AsyncBufReader::new(file);
        let mut lines = reader.lines();
        
        let mut print_time_minutes = 0u32;
        let mut filament_weight_grams = 0.0f32;
        let mut layer_count: Option<u32> = None;
        
        // Read first 200 lines for metadata (increased from 100 for better coverage)
        for _ in 0..200 {
            if let Some(line) = lines.next_line().await? {
                let lower_line = line.to_lowercase();
                
                // Parse print time
                if lower_line.contains("; estimated printing time") || lower_line.contains("; print time") {
                    if let Some(time_part) = line.split(':').last() {
                        print_time_minutes = parse_time_string_to_minutes(time_part.trim());
                    }
                }
                // Parse filament usage
                else if lower_line.contains("; filament used") || lower_line.contains("; material volume") {
                    if let Some(weight) = parse_filament_weight(&line) {
                        filament_weight_grams = weight;
                    }
                }
                // Parse layer count
                else if lower_line.contains("; layer_count") || lower_line.contains("; total layers") {
                    let layer_regex = Regex::new(r"(\d+)").unwrap();
                    if let Some(cap) = layer_regex.captures(&line) {
                        layer_count = cap[1].parse::<u32>().ok();
                    }
                }
            } else {
                break;
            }
        }
        
        // Set defaults if parsing failed
        if print_time_minutes == 0 {
            print_time_minutes = 60; // 1 hour default
        }
        if filament_weight_grams == 0.0 {
            filament_weight_grams = 20.0; // 20g default
        }
        
        Ok(SlicingResult {
            print_time_minutes,
            filament_weight_grams,
            layer_count,
        })
    })
}

/// Enhanced pricing calculation in Rust for performance
#[pyfunction]
fn calculate_quote_rust(
    print_time_minutes: u32,
    filament_weight_grams: f32,
    material_type: String,
    price_per_kg: f64,
    additional_time_hours: f64,
    price_multiplier: f64,
    minimum_price: f64,
) -> PyResult<CostBreakdown> {
    // Convert grams to kg
    let filament_kg = filament_weight_grams as f64 / 1000.0;
    
    // Convert minutes to hours and add additional time
    let print_time_hours = (print_time_minutes as f64 / 60.0) + additional_time_hours;
    
    // Calculate base costs
    let material_cost = filament_kg * price_per_kg;
    let time_cost = print_time_hours * price_per_kg; // Using material price as hourly rate
    
    // Calculate total with multiplier
    let subtotal = (material_cost + time_cost) * price_multiplier;
    
    // Apply minimum price
    let total_cost = if subtotal < minimum_price { minimum_price } else { subtotal };
    let minimum_applied = total_cost == minimum_price;
    
    // Calculate markup percentage
    let markup_percentage = (price_multiplier - 1.0) * 100.0;
    
    Ok(CostBreakdown {
        material_type,
        filament_kg,
        filament_grams: filament_weight_grams,
        print_time_hours,
        print_time_minutes,
        price_per_kg,
        material_cost,
        time_cost,
        subtotal,
        total_cost,
        minimum_applied,
        markup_percentage,
    })
}

/// High-performance file cleanup in Rust
#[pyfunction]
fn cleanup_old_files_rust(upload_dir: String, max_age_hours: u64) -> PyResult<CleanupStats> {
    let dir = Path::new(&upload_dir);
    let now = SystemTime::now();
    let max_age = Duration::from_secs(max_age_hours * 3600);
    
    let mut stats = CleanupStats {
        files_cleaned: 0,
        bytes_freed: 0,
    };
    
    if dir.is_dir() {
        for entry in fs::read_dir(dir)? {
            let entry = entry?;
            let path = entry.path();
            if path.is_file() {
                let metadata = entry.metadata()?;
                if let Ok(modified) = metadata.modified() {
                    if now.duration_since(modified).unwrap_or_default() > max_age {
                        stats.bytes_freed += metadata.len();
                        fs::remove_file(path)?;
                        stats.files_cleaned += 1;
                    }
                }
            }
        }
    }
    
    Ok(stats)
}

/// Fix inefficient STL validation to use buffered I/O
#[pyfunction]
fn validate_stl_optimized(file_path: String) -> PyResult<ModelInfo> {
    let path = Path::new(&file_path);
    
    if !path.exists() {
        return Ok(ModelInfo {
            file_type: "stl".to_string(),
            file_size: 0,
            is_valid: false,
            error_message: Some("File not found".to_string()),
        });
    }

    let file_size = fs::metadata(path)?.len();
    let mut file = fs::File::open(path)?;

    // Read first 5 bytes to check for "solid"
    let mut header = [0u8; 5];
    file.read_exact(&mut header)?;

    // Reset cursor to the beginning of the file
    file.seek(SeekFrom::Start(0))?;

    if &header == b"solid" {
        // ASCII STL: Use a buffered reader on the existing file handle
        let reader = BufReader::new(file);
        let mut found_endsolid = false;
        for line in reader.lines() {
            if line?.trim().starts_with("endsolid") {
                found_endsolid = true;
                break;
            }
        }
        
        Ok(ModelInfo {
            file_type: "stl".to_string(),
            file_size,
            is_valid: found_endsolid,
            error_message: if found_endsolid { 
                None 
            } else { 
                Some("Invalid ASCII STL format - missing endsolid".to_string()) 
            },
        })
    } else {
        // Binary STL: Read the whole file now that we know we need to
        let mut data = Vec::new();
        file.read_to_end(&mut data)?;
        
        if data.len() < 84 {
            return Ok(ModelInfo {
                file_type: "stl".to_string(),
                file_size,
                is_valid: false,
                error_message: Some("Binary STL too small".to_string()),
            });
        }

        // Read triangle count from bytes 80-83
        let triangle_count = u32::from_le_bytes([data[80], data[81], data[82], data[83]]);
        let expected_size = 80 + 4 + (triangle_count * 50); // Header + count + triangles

        if data.len() as u32 != expected_size {
            Ok(ModelInfo {
                file_type: "stl".to_string(),
                file_size,
                is_valid: false,
                error_message: Some(format!(
                    "Binary STL size mismatch. Expected {}, got {}",
                    expected_size,
                    data.len()
                )),
            })
        } else {
            Ok(ModelInfo {
                file_type: "stl".to_string(),
                file_size,
                is_valid: true,
                error_message: None,
            })
        }
    }
}

/// Python module definition
#[pymodule]
fn _rust_core(_py: Python, m: &PyModule) -> PyResult<()> {
    // Original validation functions
    m.add_function(wrap_pyfunction!(validate_stl, m)?)?;
    m.add_function(wrap_pyfunction!(validate_obj, m)?)?;
    m.add_function(wrap_pyfunction!(validate_step, m)?)?;
    m.add_function(wrap_pyfunction!(validate_3d_model, m)?)?;
    
    // Enhanced performance functions
    m.add_function(wrap_pyfunction!(parse_slicer_output, m)?)?;
    m.add_function(wrap_pyfunction!(calculate_quote_rust, m)?)?;
    m.add_function(wrap_pyfunction!(cleanup_old_files_rust, m)?)?;
    m.add_function(wrap_pyfunction!(validate_stl_optimized, m)?)?;
    
    // Data classes
    m.add_class::<ModelInfo>()?;
    m.add_class::<SlicingResult>()?;
    m.add_class::<CleanupStats>()?;
    m.add_class::<CostBreakdown>()?;
    
    Ok(())
}
</file>

<file path="templates/index.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Printing Quote Request</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .card-custom {
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        .btn-custom {
            border-radius: 25px;
            padding: 12px 30px;
            font-weight: 600;
        }
        .form-control-custom {
            border-radius: 10px;
            border: 2px solid #e9ecef;
            padding: 12px 15px;
        }
        .form-control-custom:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        .upload-area {
            border: 2px dashed #dee2e6;
            border-radius: 10px;
            padding: 40px;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .upload-area:hover {
            border-color: #667eea;
            background-color: #f8f9fa;
        }
        .upload-area.dragover {
            border-color: #667eea;
            background-color: #e3f2fd;
        }
        .file-info {
            margin-top: 15px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 5px;
            display: none;
        }
        .progress-container {
            display: none;
            margin-top: 20px;
        }
        .status-message {
            margin-top: 20px;
            display: none;
        }
    </style>
</head>
<body class="gradient-bg">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card card-custom">
                    <div class="card-header bg-white text-center py-4">
                        <h2 class="mb-0"><i class="fas fa-cube text-primary me-2"></i>3D Printing Quote Request</h2>
                        <p class="text-muted mb-0">Get an instant quote for your 3D printing project</p>
                    </div>
                    <div class="card-body p-5">
                        <form id="quoteForm" enctype="multipart/form-data">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="name" class="form-label fw-bold">
                                        <i class="fas fa-user me-2"></i>Full Name *
                                    </label>
                                    <input type="text" class="form-control form-control-custom" id="name" name="name" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="mobile" class="form-label fw-bold">
                                        <i class="fab fa-whatsapp me-2"></i>WhatsApp Number *
                                    </label>
                                    <input type="tel" class="form-control form-control-custom" id="mobile" name="mobile" 
                                           placeholder="+1234567890" required>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="material" class="form-label fw-bold">
                                        <i class="fas fa-cog me-2"></i>Material Preference
                                    </label>
                                    <select class="form-select form-control-custom" id="material" name="material">
                                        <option value="">PLA (Default)</option>
                                        {% for material in materials %}
                                        <option value="{{ material }}">{{ material }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="color" class="form-label fw-bold">
                                        <i class="fas fa-palette me-2"></i>Color Preference
                                    </label>
                                    <input type="text" class="form-control form-control-custom" id="color" name="color" 
                                           placeholder="e.g., Red, Blue, Black">
                                </div>
                            </div>
                            
                            <div class="mb-4">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-upload me-2"></i>3D Model File *
                                </label>
                                <div class="upload-area" id="uploadArea">
                                    <i class="fas fa-cloud-upload-alt fa-3x text-muted mb-3"></i>
                                    <h5>Drag & Drop your 3D model here</h5>
                                    <p class="text-muted">or <span class="text-primary fw-bold">click to browse</span></p>
                                    <p class="small text-muted">
                                        Supported formats: {{ allowed_extensions }}<br>
                                        Maximum file size: {{ max_file_size_mb }}MB
                                    </p>
                                    <input type="file" class="d-none" id="modelFile" name="model_file" 
                                           accept=".stl,.obj,.step,.stp" required>
                                </div>
                                <div class="file-info" id="fileInfo">
                                    <i class="fas fa-file me-2"></i>
                                    <span id="fileName"></span>
                                    <span class="badge bg-primary ms-2" id="fileSize"></span>
                                </div>
                            </div>
                            
                            <div class="text-center">
                                <button type="submit" class="btn btn-primary btn-lg btn-custom" id="submitBtn">
                                    <i class="fas fa-calculator me-2"></i>Request Quote
                                </button>
                            </div>
                            
                            <div class="progress-container" id="progressContainer">
                                <div class="progress">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                         role="progressbar" style="width: 0%"></div>
                                </div>
                                <p class="text-center mt-2 text-muted">Processing your request...</p>
                            </div>
                            
                            <div class="alert status-message" id="statusMessage" role="alert"></div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const uploadArea = document.getElementById('uploadArea');
            const fileInput = document.getElementById('modelFile');
            const fileInfo = document.getElementById('fileInfo');
            const fileName = document.getElementById('fileName');
            const fileSize = document.getElementById('fileSize');
            const form = document.getElementById('quoteForm');
            const submitBtn = document.getElementById('submitBtn');
            const progressContainer = document.getElementById('progressContainer');
            const statusMessage = document.getElementById('statusMessage');

            // File upload handling
            uploadArea.addEventListener('click', () => fileInput.click());
            
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });
            
            uploadArea.addEventListener('dragleave', () => {
                uploadArea.classList.remove('dragover');
            });
            
            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    fileInput.files = files;
                    handleFileSelect();
                }
            });
            
            fileInput.addEventListener('change', handleFileSelect);
            
            function handleFileSelect() {
                const file = fileInput.files[0];
                if (file) {
                    fileName.textContent = file.name;
                    fileSize.textContent = formatFileSize(file.size);
                    fileInfo.style.display = 'block';
                }
            }
            
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }
            
            // Form submission
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = new FormData(form);
                
                // Show progress
                submitBtn.disabled = true;
                progressContainer.style.display = 'block';
                statusMessage.style.display = 'none';
                
                // Simulate progress
                let progress = 0;
                const progressBar = document.querySelector('.progress-bar');
                const progressInterval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 90) progress = 90;
                    progressBar.style.width = progress + '%';
                }, 500);
                
                try {
                    const response = await fetch('/quote', {
                        method: 'POST',
                        body: formData
                    });
                    
                    clearInterval(progressInterval);
                    progressBar.style.width = '100%';
                    
                    const result = await response.json();
                    
                    if (response.ok) {
                        statusMessage.className = 'alert status-message alert-success';
                        statusMessage.innerHTML = `
                            <i class="fas fa-check-circle me-2"></i>
                            <strong>Quote request submitted successfully!</strong><br>
                            <small>We're processing your request for <strong>${result.customer_name}</strong>. 
                            You'll receive a WhatsApp message with your quote within ${result.estimated_processing_time}.</small>
                        `;
                        form.reset();
                        fileInfo.style.display = 'none';
                    } else {
                        throw new Error(result.detail || 'Request failed');
                    }
                } catch (error) {
                    clearInterval(progressInterval);
                    statusMessage.className = 'alert status-message alert-danger';
                    statusMessage.innerHTML = `
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Error:</strong> ${error.message}
                    `;
                } finally {
                    submitBtn.disabled = false;
                    progressContainer.style.display = 'none';
                    statusMessage.style.display = 'block';
                }
            });
        });
    </script>
</body>
</html>
</file>

<file path="tests/models/__init__.py">
"""Test models package."""
</file>

<file path="tests/models/test_quote.py">
"""Unit tests for Pydantic quote models."""

from datetime import datetime

import pytest
from pydantic import ValidationError

from app.models.quote import (
    MaterialType,
    QuoteRequest,
    QuoteResponse,
    QuoteStatus,
    SlicingResult,
    TelegramMessage,
)


class TestMaterialType:
    """Tests for MaterialType enum."""

    def test_material_type_values(self):
        """Test that MaterialType has expected values."""
        assert MaterialType.PLA == "PLA"
        assert MaterialType.PETG == "PETG"
        assert MaterialType.ASA == "ASA"

        # Test that all values are strings
        for material in MaterialType:
            assert isinstance(material.value, str)


class TestQuoteStatus:
    """Tests for QuoteStatus enum."""

    def test_quote_status_values(self):
        """Test that QuoteStatus has expected values."""
        assert QuoteStatus.PENDING == "pending"
        assert QuoteStatus.PROCESSING == "processing"
        assert QuoteStatus.COMPLETED == "completed"
        assert QuoteStatus.FAILED == "failed"


class TestQuoteRequest:
    """Tests for QuoteRequest model validation."""

    def test_valid_quote_request(self):
        """Test creating a valid quote request."""
        data = {
            "name": "John Doe",
            "mobile": "+6591234567",
            "material": MaterialType.PLA,
            "color": "Red",
            "filename": "test.stl",
        }

        quote = QuoteRequest(**data)

        assert quote.name == "John Doe"
        assert quote.mobile == "+6591234567"
        assert quote.material == MaterialType.PLA
        assert quote.color == "Red"
        assert quote.filename == "test.stl"

    def test_quote_request_optional_fields(self):
        """Test quote request with optional fields."""
        data = {"name": "Jane Doe", "mobile": "91234567", "filename": "model.stl"}

        quote = QuoteRequest(**data)

        assert quote.name == "Jane Doe"
        assert quote.mobile == "91234567"
        assert quote.material is None
        assert quote.color is None
        assert quote.filename == "model.stl"

    def test_name_validation_valid(self):
        """Test valid name validation."""
        valid_names = [
            "John Doe",
            "Mary-Jane",
            "O'Connor",
            "Jean-Luc",
            "Dr. Smith",
            "李明",
        ]

        for name in valid_names:
            data = {"name": name, "mobile": "+6591234567", "filename": "test.stl"}
            quote = QuoteRequest(**data)
            assert quote.name == name.strip()

    def test_name_validation_invalid(self):
        """Test invalid name validation."""
        invalid_names = [
            "",  # Empty
            "   ",  # Only whitespace
            "A" * 101,  # Too long
            "John123",  # Contains numbers
            "John@Doe",  # Contains special chars
        ]

        for name in invalid_names:
            data = {"name": name, "mobile": "+6591234567", "filename": "test.stl"}
            with pytest.raises(ValidationError):
                QuoteRequest(**data)

    def test_mobile_validation_valid(self):
        """Test valid mobile number validation."""
        valid_mobiles = [
            "+6591234567",
            "91234567",
            "+1-555-123-4567",
            "+44 20 7946 0958",
            "(555) 123-4567",
            "555.123.4567",
        ]

        for mobile in valid_mobiles:
            data = {"name": "John Doe", "mobile": mobile, "filename": "test.stl"}
            quote = QuoteRequest(**data)
            # Check that formatting is cleaned up
            cleaned_mobile = (
                quote.mobile.replace("+", "").replace("-", "").replace(" ", "")
            )
            cleaned_mobile = (
                cleaned_mobile.replace("(", "").replace(")", "").replace(".", "")
            )
            assert cleaned_mobile.isdigit()

    def test_mobile_validation_invalid(self):
        """Test invalid mobile number validation."""
        invalid_mobiles = [
            "",  # Empty
            "123",  # Too short
            "abcdefghij",  # Not numeric
            "++6591234567",  # Multiple plus signs
            "1234567890123456",  # Too long
        ]

        for mobile in invalid_mobiles:
            data = {"name": "John Doe", "mobile": mobile, "filename": "test.stl"}
            with pytest.raises(ValidationError):
                QuoteRequest(**data)

    def test_filename_validation(self):
        """Test filename validation."""
        data = {
            "name": "John Doe",
            "mobile": "+6591234567",
            "filename": "",  # Empty filename
        }

        with pytest.raises(ValidationError):
            QuoteRequest(**data)


class TestSlicingResult:
    """Tests for SlicingResult model."""

    def test_valid_slicing_result(self):
        """Test creating a valid slicing result."""
        data = {
            "print_time_minutes": 120,
            "filament_weight_grams": 25.5,
            "layer_count": 200,
            "estimated_cost": 30.25,
        }

        result = SlicingResult(**data)

        assert result.print_time_minutes == 120
        assert result.filament_weight_grams == 25.5
        assert result.layer_count == 200
        assert result.estimated_cost == 30.25

    def test_slicing_result_optional_fields(self):
        """Test slicing result with only required fields."""
        data = {"print_time_minutes": 60, "filament_weight_grams": 15.0}

        result = SlicingResult(**data)

        assert result.print_time_minutes == 60
        assert result.filament_weight_grams == 15.0
        assert result.layer_count is None
        assert result.estimated_cost is None

    def test_slicing_result_negative_values(self):
        """Test that negative values are rejected."""
        with pytest.raises(ValidationError):
            SlicingResult(print_time_minutes=-1, filament_weight_grams=20.0)

        with pytest.raises(ValidationError):
            SlicingResult(print_time_minutes=60, filament_weight_grams=-5.0)


class TestQuoteResponse:
    """Tests for QuoteResponse model."""

    def test_valid_quote_response(self):
        """Test creating a valid quote response."""
        now = datetime.now()
        data = {
            "request_id": "test-123",
            "name": "John Doe",
            "mobile": "+6591234567",
            "material": "PLA",
            "color": "Red",
            "filename": "test.stl",
            "print_time_hours": 2.0,
            "print_time_minutes": 120,
            "filament_weight_grams": 25.5,
            "material_cost": 12.75,
            "time_cost": 15.00,
            "total_cost": 30.53,
            "status": QuoteStatus.COMPLETED,
            "created_at": now,
            "processed_at": now,
        }

        response = QuoteResponse(**data)

        assert response.request_id == "test-123"
        assert response.name == "John Doe"
        assert response.total_cost == 30.53
        assert response.status == QuoteStatus.COMPLETED

    def test_print_time_hours_calculation(self):
        """Test that print_time_hours is calculated from minutes."""
        data = {
            "request_id": "test-123",
            "name": "John Doe",
            "mobile": "+6591234567",
            "material": "PLA",
            "color": None,
            "filename": "test.stl",
            "print_time_minutes": 150,  # 2.5 hours
            "filament_weight_grams": 25.5,
            "material_cost": 12.75,
            "time_cost": 15.00,
            "total_cost": 30.53,
            "status": QuoteStatus.COMPLETED,
            "created_at": datetime.now(),
        }

        response = QuoteResponse(**data)

        # Should calculate hours from minutes
        assert response.print_time_hours == 2.5


class TestTelegramMessage:
    """Tests for TelegramMessage model."""

    def test_valid_telegram_message(self):
        """Test creating a valid telegram message."""
        data = {
            "quote_id": "test-123",
            "customer_name": "John Doe",
            "customer_mobile": "+6591234567",
            "material": "PLA",
            "color": "Red",
            "filename": "test.stl",
            "print_time": "2h 30m",
            "filament_weight": "25.5g",
            "total_cost": 30.25,
        }

        message = TelegramMessage(**data)

        assert message.quote_id == "test-123"
        assert message.customer_name == "John Doe"
        assert message.total_cost == 30.25

    def test_format_message_with_material_and_color(self):
        """Test message formatting with material and color."""
        data = {
            "quote_id": "test-123",
            "customer_name": "John Doe",
            "customer_mobile": "+6591234567",
            "material": "PLA",
            "color": "Red",
            "filename": "test.stl",
            "print_time": "2h 30m",
            "filament_weight": "25.5g",
            "total_cost": 30.25,
        }

        message = TelegramMessage(**data)
        formatted = message.format_message()

        assert "New Quote Request #test-123" in formatted
        assert "Customer: John Doe" in formatted
        assert "WhatsApp: +6591234567" in formatted
        assert "File: test.stl" in formatted
        assert "Material: PLA - Red" in formatted
        assert "Print Time: 2h 30m" in formatted
        assert "Filament: 25.5g" in formatted
        assert "Total Cost: S$30.25" in formatted
        assert "Reply to this message" in formatted

    def test_format_message_without_material_and_color(self):
        """Test message formatting without optional fields."""
        data = {
            "quote_id": "test-456",
            "customer_name": "Jane Doe",
            "customer_mobile": "+6598765432",
            "material": None,
            "color": None,
            "filename": "model.stl",
            "print_time": "1h 15m",
            "filament_weight": "18.2g",
            "total_cost": 22.50,
        }

        message = TelegramMessage(**data)
        formatted = message.format_message()

        assert "New Quote Request #test-456" in formatted
        assert "Material: PLA (default)" in formatted
        # Should not contain color info when color is None
        assert " - " not in formatted.split("Material:")[1].split("\n")[0]
</file>

<file path="tests/services/__init__.py">
"""Test services package."""
</file>

<file path="tests/services/test_pricing.py">
"""Unit tests for pricing service."""

import asyncio
import os
import tempfile

from _rust_core import CostBreakdown, SlicingResult, parse_slicer_output

from app.models.quote import MaterialType
from app.services.pricing import PricingService


class TestPricingService:
    """Tests for the PricingService class."""

    def test_calculate_quote(self):
        """Test that calculate_quote returns correct structure and applies business logic."""
        service = PricingService()

        # Create a real slicing result using the Rust parser
        async def create_slicing_result() -> SlicingResult:
            with tempfile.TemporaryDirectory() as temp_dir:
                gcode_file = os.path.join(temp_dir, 'test.gcode')
                with open(gcode_file, 'w') as f:  # noqa: ASYNC230  # Test file creation
                    f.write('; estimated printing time: 2h 0m\n; filament used: 100.0g\n')

                return await parse_slicer_output(temp_dir)

        slicing_result = asyncio.run(create_slicing_result())
        result = service.calculate_quote(slicing_result, MaterialType.PLA)

        # Test structure
        assert isinstance(result, CostBreakdown)
        assert hasattr(result, 'total_cost')
        assert hasattr(result, 'material_cost')
        assert hasattr(result, 'time_cost')

        # Test business logic
        assert result.total_cost >= 5.0  # Minimum price
        assert result.total_cost > 0

    def test_format_cost_summary(self):
        """Test that format_cost_summary returns a string."""
        service = PricingService()

        # Create a real CostBreakdown using the actual pricing logic
        async def create_slicing_result() -> SlicingResult:
            with tempfile.TemporaryDirectory() as temp_dir:
                gcode_file = os.path.join(temp_dir, 'test.gcode')
                with open(gcode_file, 'w') as f:  # noqa: ASYNC230  # Test file creation
                    f.write('; estimated printing time: 2h 0m\n; filament used: 100.0g\n')

                return await parse_slicer_output(temp_dir)

        slicing_result = asyncio.run(create_slicing_result())
        cost_breakdown = service.calculate_quote(slicing_result, MaterialType.PLA)

        result = service.format_cost_summary(cost_breakdown)

        assert isinstance(result, str)
        assert len(result) > 0
        assert "Cost Breakdown:" in result
</file>

<file path="tests/services/test_slicer.py">
"""Unit tests for slicer service."""

from unittest.mock import patch

from app.models.quote import MaterialType
from app.services.slicer import OrcaSlicerService


class TestOrcaSlicerService:
    """Tests for the OrcaSlicerService class."""

    def test_get_profile_paths(self):
        """Test that get_profile_paths returns dict with required keys."""
        with patch.dict("os.environ", {"PYTEST_CURRENT_TEST": "true"}):
            service = OrcaSlicerService()
            result = service.get_profile_paths(MaterialType.PLA)

            assert isinstance(result, dict)
            assert "machine" in result
            assert "filament" in result
            assert "process" in result

    def test_get_available_materials(self):
        """Test that get_available_materials returns list of strings."""
        service = OrcaSlicerService()
        result = service.get_available_materials()

        assert isinstance(result, list)
        assert len(result) > 0
        assert all(isinstance(material, str) for material in result)
</file>

<file path="tests/services/test_telegram.py">
"""Unit tests for telegram service."""

from app.models.quote import TelegramMessage
from app.services.telegram import TelegramService


class TestTelegramService:
    """Tests for the TelegramService class."""

    def test_init(self):
        """Test TelegramService initialization."""
        service = TelegramService()

        # Should initialize without error
        assert hasattr(service, "settings")
        assert hasattr(service, "bot")

    async def test_send_quote_notification(self):
        """Test send_quote_notification returns boolean."""
        service = TelegramService()

        message = TelegramMessage(
            quote_id="test-123",
            customer_name="John Doe",
            customer_mobile="+6591234567",
            material="PLA",
            color="Red",
            filename="test.stl",
            print_time="2h 30m",
            filament_weight="25.5g",
            total_cost=30.25,
        )

        result = await service.send_quote_notification(message)

        assert isinstance(result, bool)

    async def test_send_error_notification(self):
        """Test send_error_notification returns boolean."""
        service = TelegramService()

        result = await service.send_error_notification("Test error", "test-123")

        assert isinstance(result, bool)

    async def test_test_connection(self):
        """Test test_connection returns boolean."""
        service = TelegramService()

        result = await service.test_connection()

        assert isinstance(result, bool)
</file>

<file path="tests/__init__.py">
"""Test package for orca-quote-machine."""
</file>

<file path="tests/conftest.py">
"""Core test configuration and fixtures."""

import os
import tempfile
from collections.abc import Generator
from typing import Any
from unittest.mock import MagicMock

import pytest
from fastapi.testclient import TestClient
from pytest_mock import MockerFixture

# Configure Celery for testing before importing the app
os.environ["CELERY_TASK_ALWAYS_EAGER"] = "True"
os.environ["CELERY_TASK_EAGER_PROPAGATES"] = "True"
os.environ["PYTEST_CURRENT_TEST"] = "conftest.py"
os.environ["MAX_FILE_SIZE"] = "104857600"
os.environ["SECRET_KEY"] = "test-secret-key-for-pytest"

from app.core.config import get_settings
from app.main import app


@pytest.fixture(scope="session")
def celery_config() -> dict[str, Any]:
    """Configure Celery for testing."""
    return {
        "broker_url": "memory://",
        "result_backend": "rpc://",
        "task_always_eager": True,
        "task_eager_propagates": True,
    }


@pytest.fixture(scope="module")
def client() -> TestClient:
    """Provides a TestClient for making requests to the FastAPI app."""
    with TestClient(app) as c:
        yield c


@pytest.fixture
def test_settings() -> Any:
    """Override settings for testing."""
    settings = get_settings()
    # Create temporary upload directory
    temp_dir = tempfile.mkdtemp()
    settings.upload_dir = temp_dir
    settings.max_file_size = 10 * 1024 * 1024  # 10MB for tests
    settings.secret_key = "test-secret-key"
    return settings


@pytest.fixture
def mock_orcaslicer_service(mocker: MockerFixture) -> MagicMock:
    """Mock the OrcaSlicerService to prevent actual CLI calls."""
    mock_service = mocker.patch("app.services.slicer.OrcaSlicerService")
    mock_instance = mock_service.return_value

    # Default successful return value
    mock_instance.slice_model.return_value = {
        "print_time_minutes": 120,  # 2 hours
        "filament_weight_grams": 25.5,
        "layer_count": 200,
    }
    return mock_instance


@pytest.fixture
def mock_pricing_service(mocker: MockerFixture) -> MagicMock:
    """Mock the PricingService."""
    mock_service = mocker.patch("app.services.pricing.PricingService")
    mock_instance = mock_service.return_value

    # Default pricing calculation
    mock_instance.calculate_quote.return_value = {
        "material_cost": 12.50,
        "time_cost": 15.00,
        "total_cost": 30.25,
    }
    return mock_instance


@pytest.fixture
def mock_telegram_service(mocker: MockerFixture) -> MagicMock:
    """Mock the TelegramService."""
    mock_service = mocker.patch("app.services.telegram.TelegramService")
    mock_instance = mock_service.return_value

    # Mock successful message sending
    mock_instance.send_quote_notification.return_value = True
    return mock_instance


@pytest.fixture
def mock_rust_validation(mocker: MockerFixture) -> MagicMock:
    """Mock the Rust validation functions."""
    mock_validate = mocker.patch("app.tasks.validate_3d_model")
    mock_validate.return_value = True  # Valid file by default
    return mock_validate


@pytest.fixture
def sample_stl_content() -> bytes:
    """Sample STL file content for testing."""
    return b"""solid test_model
facet normal 0.0 0.0 1.0
  outer loop
    vertex 0.0 0.0 0.0
    vertex 1.0 0.0 0.0
    vertex 0.0 1.0 0.0
  endloop
endfacet
endsolid test_model"""


@pytest.fixture
def sample_quote_data() -> dict[str, Any]:
    """Sample valid quote request data."""
    return {
        "name": "John Doe",
        "mobile": "+6591234567",
        "material": "PLA",
        "color": "Red",
    }


@pytest.fixture
def invalid_quote_data() -> dict[str, Any]:
    """Sample invalid quote request data for testing validation."""
    return {
        "name": "",  # Invalid: empty name
        "mobile": "invalid-phone",  # Invalid format
        "material": "INVALID_MATERIAL",  # Invalid material
        "color": "A" * 100,  # Invalid: too long
    }


@pytest.fixture
def temp_upload_file(sample_stl_content: bytes) -> Generator[str, None, None]:
    """Create a temporary file for upload testing."""
    with tempfile.NamedTemporaryFile(suffix=".stl", delete=False) as f:
        f.write(sample_stl_content)
        f.flush()
        yield f.name
    # Cleanup
    os.unlink(f.name)


@pytest.fixture(autouse=True)
def cleanup_uploads():
    """Automatically cleanup upload directory after each test."""
    yield
    # Cleanup logic can be added here if needed
    pass
</file>

<file path="tests/test_config.py">
"""Tests for configuration settings.

Focus: Test our custom validation logic, not Pydantic's built-in validation.
Pydantic already handles type validation, required fields, and env var parsing.
"""

import os
from pathlib import Path
from unittest.mock import patch

import pytest
from pydantic import ValidationError

from app.core.config import Settings, SlicerProfileSettings, get_settings


class TestCustomValidationLogic:
    """Tests for our custom validation logic that extends Pydantic."""

    def test_extension_normalization(self):
        """Test our custom extension normalization logic."""
        settings = Settings(
            secret_key="test-secret-key",
            allowed_extensions=["STL", "obj", ".step", "STP"],  # Mixed formats
            _env_file=None,  # Don't load .env to isolate test
        )

        # Test OUR normalization logic - should all be lowercase with dots
        assert settings.allowed_extensions == [".stl", ".obj", ".step", ".stp"]

    def test_extension_normalization_edge_cases(self):
        """Test extension normalization with edge cases."""
        settings = Settings(
            secret_key="test-secret-key",
            allowed_extensions=["3MF", ".GCODE", "step"],
            _env_file=None,
        )

        # All should be normalized to lowercase with leading dots
        assert settings.allowed_extensions == [".3mf", ".gcode", ".step"]

    def test_slicer_profiles_auto_initialization(self):
        """Test our custom slicer profiles initialization logic."""
        settings = Settings(
            secret_key="test-secret-key",
            slicer_profiles=None,  # Explicitly set to None
            _env_file=None,
        )

        # Test OUR initialization logic - should auto-create SlicerProfileSettings
        assert settings.slicer_profiles is not None
        assert isinstance(settings.slicer_profiles, SlicerProfileSettings)

    @patch.dict(os.environ, {"PYTEST_CURRENT_TEST": "test_file.py::test_name"})
    def test_profile_validation_skipped_in_tests(self):
        """Test our custom environment-based validation skipping logic."""
        # This tests OUR conditional logic for skipping validation in test environments
        # Should not raise ValidationError even with nonexistent profile paths
        slicer_settings = SlicerProfileSettings(
            base_dir=Path("nonexistent_directory"),
            machine="missing_machine.json",
            process="missing_process.json",
        )

        # Should succeed because our logic skips validation in test environment
        assert slicer_settings is not None
        assert slicer_settings.base_dir == Path("nonexistent_directory")

    @patch.dict(os.environ, {"SKIP_PROFILE_VALIDATION": "true"})
    def test_profile_validation_skipped_when_flag_set(self):
        """Test our validation skipping with explicit environment flag."""
        # Test another path of OUR conditional logic
        slicer_settings = SlicerProfileSettings(
            base_dir=Path("another_nonexistent_directory")
        )

        # Should succeed because of our SKIP_PROFILE_VALIDATION logic
        assert slicer_settings is not None

    def test_profile_validation_runs_in_production_like_environment(self):
        """Test that our validation logic runs when not in test environment."""
        # Clear test environment variables to simulate production
        with (
            patch.dict(os.environ, {}, clear=True),
            pytest.raises(ValueError, match="profile not found"),
        ):
            SlicerProfileSettings(base_dir=Path("definitely_nonexistent_directory"))


class TestConfigurationBehavior:
    """Tests for configuration behavior and integration logic."""

    def test_settings_with_minimal_required_config(self):
        """Test that Settings can be created with minimal required config."""
        settings = Settings(
            secret_key="test-secret-key",
            _env_file=None,  # Don't load .env to test true defaults
        )

        # Should succeed and have reasonable defaults
        assert settings.secret_key == "test-secret-key"
        assert settings.app_name == "OrcaSlicer Quotation Machine"
        assert settings.debug is False
        assert isinstance(settings.slicer_profiles, SlicerProfileSettings)

    def test_secret_key_is_required(self):
        """Test that SECRET_KEY is truly required (Pydantic's validation)."""
        # This is a minimal test of Pydantic's required field validation
        # We trust Pydantic for most validation, but SECRET_KEY is critical

        # Clear SECRET_KEY from environment to ensure it's required
        with (
            patch.dict(os.environ, {}, clear=True),
            pytest.raises(ValidationError, match="secret_key"),
        ):
            Settings(_env_file=None)

    def test_get_settings_caching_behavior(self):
        """Test our caching function behavior."""
        # Set required field
        with patch.dict(os.environ, {"SECRET_KEY": "test-key"}):
            # Clear cache first
            get_settings.cache_clear()

            settings1 = get_settings()
            settings2 = get_settings()

            # Should be the same instance due to @lru_cache
            assert settings1 is settings2

    def test_nested_env_var_parsing(self):
        """Test that nested environment variables work correctly."""
        env_vars = {
            "SECRET_KEY": "test-secret-key",
            "SLICER_PROFILES__BASE_DIR": "custom/profiles/path",
            "SLICER_PROFILES__MACHINE": "custom_machine.json",
        }

        with patch.dict(os.environ, env_vars):
            settings = Settings(_env_file=None)

            # Test that nested env vars are parsed correctly
            assert str(settings.slicer_profiles.base_dir) == "custom/profiles/path"
            assert settings.slicer_profiles.machine == "custom_machine.json"


class TestSlicerProfileSettings:
    """Tests specifically for SlicerProfileSettings custom logic."""

    def test_profile_path_construction(self):
        """Test that profile paths are constructed correctly."""
        with patch.dict(os.environ, {"PYTEST_CURRENT_TEST": "true"}):
            slicer_settings = SlicerProfileSettings(
                base_dir=Path("/custom/path"),
                machine="my_machine.json",
                filament_pla="my_pla.json",
            )

            # Test that our path logic works correctly
            assert slicer_settings.base_dir == Path("/custom/path")
            assert slicer_settings.machine == "my_machine.json"
            assert slicer_settings.filament_pla == "my_pla.json"

    def test_default_profile_names(self):
        """Test that default profile filenames are sensible."""
        with patch.dict(os.environ, {"PYTEST_CURRENT_TEST": "true"}):
            slicer_settings = SlicerProfileSettings()

            # Test our updated default choices that match actual files
            assert slicer_settings.machine == "RatRig V-Core 3 400 0.5 nozzle.json"
            assert slicer_settings.process == "0.25mm RatRig 0.5mm nozzle - slower.json"
            assert slicer_settings.filament_pla == "Alt Tab PLA+.json"
            assert slicer_settings.filament_petg == "Polymaker PETG PEI.json"
            assert slicer_settings.filament_asa == "fusrock ASA G11.json"
</file>

<file path="tests/test_main.py">
"""Integration tests for FastAPI endpoints."""

from unittest.mock import MagicMock

from fastapi.testclient import TestClient
from pytest_mock import MockerFixture


class TestHomeEndpoint:
    """Tests for the home page endpoint."""

    def test_home_page_returns_html(self, client: TestClient) -> None:
        """Test that the home page returns HTML with the form."""
        response = client.get("/")

        assert response.status_code == 200
        assert "text/html" in response.headers["content-type"]
        # Check that form elements are present
        assert "form" in response.text.lower()
        assert "file" in response.text.lower()


class TestHealthEndpoint:
    """Tests for the health check endpoint."""

    def test_health_check(self, client: TestClient) -> None:
        """Test that health check returns proper status."""
        response = client.get("/health")

        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        assert "app_name" in data
        assert "version" in data


class TestQuoteEndpoint:
    """Tests for the quote processing endpoint."""

    def test_create_quote_success(
        self,
        client: TestClient,
        sample_stl_content: bytes,
        sample_quote_data: dict,
        mock_orcaslicer_service: MagicMock,
        mock_pricing_service: MagicMock,
        mock_telegram_service: MagicMock,
    ) -> None:
        """Test successful quote creation with valid data."""
        files = {
            "model_file": ("test.stl", sample_stl_content, "application/octet-stream")
        }

        response = client.post("/quote", files=files, data=sample_quote_data)

        assert response.status_code == 202
        data = response.json()
        assert "task_id" in data
        assert "message" in data
        assert data["customer_name"] == sample_quote_data["name"]
        assert data["filename"] == "test.stl"
        assert "estimated_processing_time" in data

    def test_create_quote_no_file(
        self, client: TestClient, sample_quote_data: dict
    ) -> None:
        """Test quote creation fails when no file is provided."""
        response = client.post("/quote", data=sample_quote_data)

        assert response.status_code == 422  # Validation error

    def test_create_quote_invalid_file_extension(
        self, client: TestClient, sample_quote_data: dict
    ) -> None:
        """Test quote creation fails with invalid file extension."""
        files = {"model_file": ("test.txt", b"not a 3d model", "text/plain")}

        response = client.post("/quote", files=files, data=sample_quote_data)

        assert response.status_code == 400
        assert "File type .txt not allowed" in response.json()["detail"]

    def test_create_quote_invalid_material(
        self, client: TestClient, sample_stl_content: bytes
    ) -> None:
        """Test quote creation fails with invalid material."""
        files = {
            "model_file": ("test.stl", sample_stl_content, "application/octet-stream")
        }
        data = {
            "name": "John Doe",
            "mobile": "+6591234567",
            "material": "INVALID_MATERIAL",
            "color": "Red",
        }

        response = client.post("/quote", files=files, data=data)

        assert response.status_code == 400
        assert "Invalid material" in response.json()["detail"]

    def test_create_quote_invalid_name(
        self, client: TestClient, sample_stl_content: bytes
    ) -> None:
        """Test quote creation fails with invalid name."""
        files = {
            "model_file": ("test.stl", sample_stl_content, "application/octet-stream")
        }
        data = {"name": "", "mobile": "+6591234567", "material": "PLA"}  # Empty name

        response = client.post("/quote", files=files, data=data)

        assert response.status_code == 422  # Validation error

    def test_create_quote_invalid_mobile(
        self, client: TestClient, sample_stl_content: bytes
    ) -> None:
        """Test quote creation fails with invalid mobile number."""
        files = {
            "model_file": ("test.stl", sample_stl_content, "application/octet-stream")
        }
        data = {"name": "John Doe", "mobile": "invalid-phone", "material": "PLA"}

        response = client.post("/quote", files=files, data=data)

        assert response.status_code == 400
        assert "Invalid mobile number format" in response.json()["detail"]

    def test_create_quote_no_filename(
        self, client: TestClient, sample_stl_content: bytes, sample_quote_data: dict
    ) -> None:
        """Test quote creation fails when file has no filename."""
        files = {"model_file": ("", sample_stl_content, "application/octet-stream")}

        response = client.post("/quote", files=files, data=sample_quote_data)

        assert response.status_code == 422
        assert "detail" in response.json()

    def test_create_quote_large_file(
        self, client: TestClient, sample_quote_data: dict
    ) -> None:
        """Test quote creation fails with oversized file."""
        # Create a large file (larger than 100MB default limit)
        large_content = b"x" * (101 * 1024 * 1024)  # 101MB
        files = {"model_file": ("large.stl", large_content, "application/octet-stream")}

        response = client.post("/quote", files=files, data=sample_quote_data)

        assert response.status_code == 413  # Request entity too large
        assert "File too large" in response.json()["detail"]


class TestTaskStatusEndpoint:
    """Tests for the task status endpoint."""

    def test_get_task_status_pending(
        self, client: TestClient, mocker: MockerFixture
    ) -> None:
        """Test getting status of a pending task."""
        # Mock celery result
        mock_result = mocker.patch("app.main.celery_app.AsyncResult")
        mock_result.return_value.state = "PENDING"

        response = client.get("/status/test-task-id")

        assert response.status_code == 200
        data = response.json()
        assert data["task_id"] == "test-task-id"
        assert data["status"] == "processing"

    def test_get_task_status_success(
        self, client: TestClient, mocker: MockerFixture
    ) -> None:
        """Test getting status of a successful task."""
        mock_result = mocker.patch("app.main.celery_app.AsyncResult")
        mock_result.return_value.state = "SUCCESS"
        mock_result.return_value.result = {"total_cost": 25.50}

        response = client.get("/status/test-task-id")

        assert response.status_code == 200
        data = response.json()
        assert data["task_id"] == "test-task-id"
        assert data["status"] == "completed"
        assert "result" in data

    def test_get_task_status_failure(
        self, client: TestClient, mocker: MockerFixture
    ) -> None:
        """Test getting status of a failed task."""
        mock_result = mocker.patch("app.main.celery_app.AsyncResult")
        mock_result.return_value.state = "FAILURE"
        mock_result.return_value.info = "Slicing failed"

        response = client.get("/status/test-task-id")

        assert response.status_code == 200
        data = response.json()
        assert data["task_id"] == "test-task-id"
        assert data["status"] == "failed"
        assert "error" in data
</file>

<file path="tests/test_tasks.py">
"""Unit tests for Celery tasks."""

from unittest.mock import AsyncMock, MagicMock, patch

import pytest

from app.models.quote import MaterialType
from app.tasks import (
    cleanup_old_files,
    process_quote_request,
    run_processing_pipeline,
    send_failure_notification,
)


class TestTasks:
    """Tests for Celery task functions."""

    @patch("app.tasks.asyncio.run")
    @patch("app.tasks.validate_3d_model", None)
    @patch("app.tasks.os.path.exists", return_value=False)
    def test_process_quote_request(
        self, mock_exists: MagicMock, mock_asyncio_run: MagicMock
    ) -> None:
        """Test process_quote_request task function."""
        mock_asyncio_run.return_value = {"success": True, "total_cost": 25.50}

        quote_data = {
            "name": "John Doe",
            "mobile": "+6591234567",
            "filename": "test.stl",
        }

        result = process_quote_request("/path/to/file.stl", quote_data, "PLA")

        assert isinstance(result, dict)
        assert "success" in result

    @pytest.mark.asyncio
    @patch("app.tasks.OrcaSlicerService")
    @patch("app.tasks.PricingService")
    @patch("app.tasks.TelegramService")
    async def test_run_processing_pipeline(
        self, mock_telegram: MagicMock, mock_pricing: MagicMock, mock_slicer: MagicMock
    ) -> None:
        """Test run_processing_pipeline function."""
        import os
        import tempfile

        from _rust_core import SlicingResult, parse_slicer_output

        # Create a real SlicingResult using Rust parser
        async def create_real_slicing_result() -> SlicingResult:
            with tempfile.TemporaryDirectory() as temp_dir:
                gcode_file = os.path.join(temp_dir, 'test.gcode')
                with open(gcode_file, 'w') as f:  # noqa: ASYNC230  # Test file creation
                    f.write('; estimated printing time: 2h 0m\n; filament used: 25.5g\n')
                return await parse_slicer_output(temp_dir)

        real_slicing_result = await create_real_slicing_result()

        # Setup mocks with real objects
        mock_slicer_instance = mock_slicer.return_value
        mock_slicer_instance.slice_model = AsyncMock(return_value=real_slicing_result)

        # Use real pricing service to create real CostBreakdown
        from app.services.pricing import PricingService
        real_pricing_service = PricingService()
        real_cost_breakdown = real_pricing_service.calculate_quote(real_slicing_result, MaterialType.PLA)

        mock_pricing_instance = mock_pricing.return_value
        mock_pricing_instance.calculate_quote.return_value = real_cost_breakdown

        mock_telegram_instance = mock_telegram.return_value
        mock_telegram_instance.send_quote_notification = AsyncMock(return_value=True)

        quote_data = {
            "name": "John Doe",
            "mobile": "+6591234567",
            "filename": "test.stl",
        }

        result = await run_processing_pipeline(
            "/path/to/test.stl", quote_data, MaterialType.PLA, "test-uuid", "test-123"
        )

        assert isinstance(result, dict)
        assert "success" in result

    @pytest.mark.asyncio
    @patch("app.tasks.TelegramService")
    async def test_send_failure_notification(self, mock_telegram: MagicMock) -> None:
        """Test send_failure_notification function."""
        mock_telegram_instance = mock_telegram.return_value
        mock_telegram_instance.send_error_notification = AsyncMock()

        result = await send_failure_notification("Test error", "test-123")

        # Function returns None
        assert result is None

    @patch("app.tasks.cleanup_old_files_rust")
    def test_cleanup_old_files(self, mock_cleanup_rust: MagicMock) -> None:
        """Test cleanup_old_files function."""
        # Mock the Rust cleanup function to return stats
        mock_stats = MagicMock()
        mock_stats.files_cleaned = 5
        mock_stats.bytes_freed = 12345
        mock_cleanup_rust.return_value = mock_stats

        result = cleanup_old_files(max_age_hours=24)

        assert isinstance(result, dict)
        assert "success" in result
        assert result["files_cleaned"] == 5
        assert result["bytes_freed"] == 12345
</file>

<file path=".gitignore">
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Project specific
uploads/
*.stl
*.obj
*.step
*.stp
*.gcode
target/
Cargo.lock

# Logs
*.log
logs/

# Temporary files
temp/
tmp/
*.tmp

# Celery
celerybeat-schedule
celerybeat.pid

# Redis
dump.rdb
</file>

<file path=".pre-commit-config.yaml">
# .pre-commit-config.yaml

# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

# Define the minimum version of pre-commit required
minimum_pre_commit_version: "3.0.0"

repos:
  # SECRET SCANNING - CRITICAL SECURITY CHECK (must be first)
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.4
    hooks:
      - id: gitleaks
        name: 🚨 Detect secrets and credentials
        description: Scan for API keys, tokens, and other secrets
        verbose: true

  # Standard hooks for file hygiene
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=10240']  # 10MB limit

  # Ruff pre-commit hooks (replaces black, isort, and many flake8 plugins)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    # Use a recent, stable version of ruff.
    rev: v0.4.4
    hooks:
      # 1. Run the linter, with auto-fixing enabled.
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
      # 2. Run the formatter.
      - id: ruff-format

  # Mypy pre-commit hook for static type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.10.0
    hooks:
      - id: mypy
        # Mypy needs your project's dependencies to run correctly.
        # This list should be kept in sync with your `pyproject.toml`.
        # The '.' installs the local project itself.
        additional_dependencies:
          - "fastapi"
          - "pydantic"
          - "celery"
          - "pytest"
          - "httpx"
          - "."
        # Point mypy to the same directories we check in CI.
        args: ["--config-file=pyproject.toml", "app", "tests"]

  # Local custom hooks for additional security
  - repo: local
    hooks:
      - id: prevent-env-files
        name: 🚨 Prevent .env files from being committed
        entry: bash -c 'if git diff --cached --name-only | grep -E "\\.env$"; then echo "ERROR: .env files contain secrets and should NEVER be committed!"; exit 1; fi'
        language: system
        stages: [commit]
        verbose: true
</file>

<file path="Cargo.toml">
[package]
name = "orca-quote-machine"
version = "0.1.0"
edition = "2021"

[lib]
name = "_rust_core"
crate-type = ["cdylib"]

[dependencies]
pyo3 = { version = "0.20", features = ["extension-module"] }
thiserror = "1.0"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
tokio = { version = "1.0", features = ["fs", "macros", "rt", "io-util"] }
regex = "1.10"

[dependencies.pyo3-asyncio]
version = "0.20"
features = ["attributes", "tokio-runtime"]
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

# 🚨 SECURITY: SECRETS & CREDENTIALS 🚨

**CRITICAL: Under NO circumstances should secrets, API keys, or credentials EVER be committed to this repository.**

## Absolute Prohibitions
- **NEVER commit `.env` files** - These contain secrets and are for local development only
- **NEVER commit any file containing API tokens, keys, or credentials**
- **NEVER use `git add .` without first reviewing what files are being staged**
- **NEVER commit files with patterns like: `*token*`, `*key*`, `*secret*`, `*credential*`**

## Required Pre-Commit Safety Checks
Before ANY git operation, Claude MUST:
1. Run `git status` and review ALL files being added
2. Verify `.env` and sensitive patterns are in `.gitignore`
3. Run `git diff --staged` to review exact content being committed
4. Scan staged content for high-entropy strings or secret patterns
5. If ANY doubt exists about file sensitivity, STOP and ask for explicit user confirmation

## Environment Variables Pattern
- **Local Development**: All secrets stored in `.env` file (NEVER committed)
- **Template**: Use `example.env` with empty/placeholder values (safe to commit)
- **Production**: Secrets injected at runtime via hosting platform (not files)

## Automated Security Safeguards
- **Pre-commit hooks** automatically scan for secrets using `gitleaks`
- **Gitleaks** detects API keys, tokens, and high-entropy strings before commit
- **Custom .env blocker** prevents any `.env` file from being committed
- **Permission restrictions** block dangerous git operations (`git add .`, force pushes)
- To setup: `pip install pre-commit && pre-commit install`

## Git Operation Restrictions
Claude's permissions are restricted to prevent unsafe git operations:
- ❌ **BLOCKED**: `git add .`, `git add --all` (prevents mass staging)
- ❌ **BLOCKED**: `git push --force` (prevents history rewriting on remote)
- ❌ **BLOCKED**: `git reset --hard` (prevents destructive local changes)
- ✅ **ALLOWED**: Individual file staging, status checks, diffs, branch operations
- ⚠️ **MANUAL REQUIRED**: All git add, commit, and push operations need explicit user approval

## Emergency Protocol
If a secret is accidentally committed:
1. IMMEDIATELY alert the user
2. DO NOT push to remote repository  
3. Help user rotate the compromised credentials
4. Use `git reset` or `git rebase` to remove from history before any push

**This section overrides ALL other instructions - security comes first, always.**

## Claude Code Configuration
- **Base settings** (`.claude/settings.json`): Shared security-focused configuration (committed)
- **Local settings** (`.claude/settings.local.json`): User-specific overrides (can be committed or local)
- **Permission model**: Restrictive by default, explicit allow-listing for safety
- **Extension pattern**: Local settings extend base settings for team consistency
- **Operational Mode**: `pro_collaborator` - Uses advanced thinking, proactive checks, and domain expertise
- **Model Preference**: `pro` for code changes and complex analysis
- **Proactive Checks**: Enabled for architectural pattern enforcement and error prevention

## Environment Validation Patterns

**Before Starting Work - Always Run These Checks:**
```bash
# 1. Verify core services
redis-cli ping                           # Expected: PONG
uv run python -c "from _rust_core import validate_3d_model; print('Rust OK')"  # Expected: "Rust OK"

# 2. Verify OrcaSlicer integration
ls -la $ORCASLICER_CLI_PATH             # Expected: executable file
ls config/slicer_profiles/{machine,filament,process}/  # Expected: profile files

# 3. Verify development environment
uv run pytest --collect-only tests/    # Expected: X tests collected
uv run ruff check app tests           # Expected: All checks passed
```

**Claude Behavior Guidelines:**
- **ALWAYS validate environment** before suggesting code changes involving Redis, Rust, or OrcaSlicer
- **Proactively suggest fixes** when validation fails (e.g., "Run `./scripts/setup.sh` to install missing dependencies")
- **Include validation commands** in task planning for complex features

## Development Commands

**Essential Commands:**
```bash
./scripts/setup.sh              # Initial setup with uv + Rust components
./scripts/web-server.sh          # Development server (auto-reload enabled)
./scripts/worker.sh              # Celery background worker
./scripts/production-server.sh   # Production server (4 workers, optimized)
./scripts/test.sh               # Full test suite (Python + Rust + integration)
./scripts/format.sh             # Code formatting (ruff format + check + mypy)
```

**Manual Commands:**
```bash
uv sync --group dev             # Install dependencies
maturin develop                 # Build Rust components
uv run pytest -xvs tests/      # Run specific tests
uv run celery -A app.tasks worker --loglevel=debug  # Debug worker
redis-cli ping                 # Verify Redis connection
```

**Build System:**
- Use `uv` for all Python package management (not pip/poetry)
- Use `maturin develop` to rebuild Rust components after changes
- Redis must be running before starting workers or web server

## Dependency Management

**Python Dependencies (uv):**
- **Core Dependencies**: Listed in `[project.dependencies]` for runtime requirements
- **Development Dependencies**: Use `[dependency-groups.dev]` for dev tools (pytest, ruff, mypy)
- **Version Pinning**: Pin exact versions for dev tools (e.g., `ruff==0.11.13`) for consistency
- **Version Ranges**: Use compatible ranges for runtime deps (e.g., `fastapi>=0.104.0`)

**Dependency Commands:**
```bash
uv sync --group dev              # Install all dependencies including dev group
uv add package_name              # Add new runtime dependency
uv add --group dev package_name  # Add new dev dependency
uv lock                          # Update lock file with latest compatible versions
uv sync --frozen                 # Install exact versions from lock file (CI/prod)
```

**Rust Dependencies (Cargo.toml):**
- **PyO3 Integration**: Rust dependencies managed separately via `src/Cargo.toml`
- **Rebuild Required**: Run `maturin develop` after Rust dependency changes
- **Version Compatibility**: Ensure PyO3 version matches Python version requirements

**Update Strategy:**
- **Regular Updates**: Monthly dependency updates with full test suite validation
- **Security Updates**: Immediate updates for security vulnerabilities
- **Breaking Changes**: Test thoroughly with integration tests before updating major versions
- **Lock File**: Commit `uv.lock` to ensure reproducible builds across environments

**Multi-Language Coordination:**
- **Python-Rust Boundary**: Changes to PyO3 bindings require rebuilding both sides
- **Development Workflow**: Always run `maturin develop` after pulling Rust changes
- **CI/CD**: Build pipeline handles both Python and Rust dependency installation

## System Architecture

**Core Processing Pipeline:**
```
HTTP Upload → FastAPI → File Validation (Rust) → Celery Queue → 
OrcaSlicer CLI → G-code Parsing → Pricing → Telegram Notification
```

**Component Separation:**
- **Web Layer** (`app/main.py`): FastAPI with async file upload, immediate responses
- **Worker Layer** (`app/tasks.py`): Celery background processing with `asyncio.run()`
- **Service Layer** (`app/services/`): Business logic isolation (slicer, pricing, telegram)
- **Performance Layer** (`src/lib.rs`): Rust validation via PyO3 bindings

**Critical Async Patterns:**
- FastAPI routes use chunked file reading (8KB chunks) to prevent memory DoS
- Celery tasks use `asyncio.run()` to execute async service calls
- All external calls (OrcaSlicer CLI, Telegram API) are properly awaited

## Architectural Patterns

### 1. API Task Offload Pattern
**Use Case**: Long-running operations (slicing, complex calculations)
**Implementation**:
1. **FastAPI Endpoint**: Receives request, validates input, saves file
2. **Celery Task**: Enqueued with file identifier, handles processing
3. **Status Endpoint**: Polling endpoint for task progress/results
4. **Response Flow**: Immediate 202 Accepted → Background processing → Status polling

**Key Requirements**:
- Use `secure_filename()` for all user-provided filenames
- Return task ID immediately, process asynchronously
- Implement proper file cleanup in `finally` blocks
- Handle timeouts gracefully (OrcaSlicer default: 5 minutes)

### 2. Rust Calculation Pattern  
**Use Case**: CPU-bound operations (mesh analysis, geometric calculations)
**Implementation**:
1. **Rust Function**: Core logic with `std::panic::catch_unwind`
2. **PyO3 Binding**: `#[pyfunction]` decorator with proper error translation
3. **Python Wrapper**: Exception handling for Rust panics
4. **Execution Context**: Called from Celery tasks or `run_in_executor`

**Safety Requirements**:
- Always wrap Rust calls in try/except blocks
- Use `BufReader` for streaming large file operations
- Validate input data before passing to Rust
- Handle memory allocation failures gracefully

### 3. PyO3 Object Creation Pattern
**Use Case**: Creating PyO3 classes that can be used seamlessly between Rust and Python
**Implementation**:
1. **Class Definition**: Use `#[derive(Debug, Clone)]` only - avoid Serde derives that conflict with PyO3
2. **No Explicit Constructor**: Let PyO3 handle automatic constructor generation
3. **Factory Functions**: Create objects via Rust functions that return instances to Python
4. **Property Access**: Use `#[pyo3(get)]` for field access from Python

**Critical Requirements**:
- **NEVER use `Serialize, Deserialize` derives** on `#[pyclass]` structs - they conflict with PyO3 constructor generation
- **Avoid explicit `#[new]` methods** unless absolutely necessary - PyO3 auto-generation is preferred
- **Create objects via functions**: Use Rust functions like `parse_slicer_output()` to create and return objects
- **Test with real objects**: Never mock PyO3 objects in tests - use the actual Rust creation functions

**Anti-Pattern Examples**:
```rust
// BAD: Conflicting derives prevent constructor generation
#[derive(Debug, Clone, Serialize, Deserialize)]
#[pyclass]
pub struct SlicingResult { ... }

// BAD: Explicit constructor often conflicts with auto-generation
#[pymethods]
impl SlicingResult {
    #[new]
    fn new(...) -> Self { ... }  // Often causes "No constructor defined" errors
}
```

**Correct Pattern**:
```rust
// GOOD: Clean derives that work with PyO3
#[derive(Debug, Clone)]
#[pyclass]
pub struct SlicingResult {
    #[pyo3(get)]
    pub print_time_minutes: u32,
    // ...
}

// GOOD: Factory function approach
#[pyfunction]
fn parse_slicer_output(...) -> PyResult<SlicingResult> {
    Ok(SlicingResult { ... })  // Created by Rust, returned to Python
}
```

**Testing Pattern**:
```python
# GOOD: Use real Rust functions in tests
async def create_real_slicing_result() -> SlicingResult:
    with tempfile.TemporaryDirectory() as temp_dir:
        # Create test data
        return await parse_slicer_output(temp_dir)  # Real Rust function

# BAD: Mocking PyO3 objects
mock_result = MagicMock()  # Avoid this - use real Rust objects
```

### 4. External CLI Integration Pattern
**Use Case**: OrcaSlicer subprocess execution
**Implementation**:
1. **Command Validation**: Verify CLI path and arguments
2. **Timeout Protection**: Set reasonable limits (default 5 minutes)
3. **Output Parsing**: Handle G-code comments and metadata
4. **Error Recovery**: Graceful fallback for CLI failures

**Security Requirements**:
- Validate all CLI arguments against known patterns
- Use absolute paths for executables
- Sanitize file paths to prevent injection
- Monitor resource usage during execution

## Configuration Management

**Settings Architecture:**
- **Central Config** (`app/core/config.py`): Pydantic BaseSettings with validation
- **Environment Variables**: All settings configurable via `.env` file
- **Security**: `SECRET_KEY` must be set in environment (no default)
- **Material Pricing**: Configurable per-kg costs for PLA/PETG/ASA in SGD

**Critical Settings:**
```python
ORCASLICER_CLI_PATH=/var/lib/flatpak/exports/bin/io.github.softfever.OrcaSlicer
SLICER_PROFILES_DIR=config/slicer_profiles/  # Required: machine/, filament/, process/ subdirs
TELEGRAM_BOT_TOKEN=                          # For admin notifications
TELEGRAM_ADMIN_CHAT_ID=                      # Where quotes are sent
```

## Security Implementation

**File Upload Protection:**
- `secure_filename()` function prevents path traversal attacks
- Streaming validation during upload (not after) prevents memory exhaustion
- Rust validation checks file integrity before expensive slicing operations

**Input Sanitization:**
- All user inputs validated through Pydantic models with custom validators
- Filename sanitization removes directory traversal characters
- File extension validation before processing

## OrcaSlicer Integration

**CLI Workflow:**
1. Model uploaded and validated
2. Appropriate material profile selected from `config/slicer_profiles/`
3. CLI executed with `--slice`, `--export-slicedata`, profile loading
4. G-code comments parsed for print time/filament usage
5. Results fed into pricing calculation

**Profile Management:**
- Profiles stored in `config/slicer_profiles/{machine,filament,process}/`
- Machine profile: `machine/default_machine.json` (your 3D printer config)
- Material profiles: PLA (default), PETG, ASA in `filament/` directory
- Process profile: `process/standard_0.2mm.json` (print settings)
- Symlink from existing OrcaSlicer installation recommended for easy updates

## Development vs Production

**Key Differences:**
- **Development**: Single worker, `--reload`, detailed logging, local Redis
- **Production**: Multi-worker (4), no reload, warning-level logs, containerized
- **Testing**: Use test Redis instance, mock OrcaSlicer for unit tests

**Docker Architecture:**
- Multi-stage build: builder stage (Rust compilation) + runtime stage
- Health checks for all services
- Nginx reverse proxy with security headers and upload optimization

## Celery Task Architecture

**Background Processing Design:**
- `process_quote_request()`: Main task orchestrating the pipeline
- `run_processing_pipeline()`: Async helper for service coordination
- `send_failure_notification()`: Error handling with admin alerts

**Task Flow:**
1. File validation (Rust)
2. Material enum parsing
3. Async pipeline execution (slicing → pricing → notification)
4. Result storage and cleanup

**Important Patterns:**
- Use full UUIDs for quote_id (collision prevention)
- Always clean up uploaded files in finally blocks
- Graceful degradation when external services unavailable

## Currency and Pricing

**Pricing Formula:**
```
total = (filament_kg × price_per_kg) × (print_time + 0.5h) × 1.1
minimum = S$5.00
```

**Currency**: All prices in Singapore Dollars (SGD), formatted as `S$X.XX`

## Code Quality & Linting

**Ruff Configuration (`pyproject.toml`):**
- **Rule Selection**: Current ruleset balances strictness with FastAPI/async patterns
- **Selected Rules**: `E/F` (core), `W` (warnings), `I` (imports), `UP` (modernize), `B` (bugs), `C4` (comprehensions), `SIM` (simplify), `ANN` (annotations), `ASYNC` (async patterns), `TID` (imports)
- **Ignored Rules**: `B008` (FastAPI Depends pattern), `ANN401` (allows typing.Any)

**Configuration Management:**
- **Version Pinning**: Ruff version pinned to `0.11.13` in dependencies for consistency
- **Rule Updates**: When updating ruff versions, check for deprecated rules with `uv run ruff check --show-settings`
- **Deprecated Rules**: Remove deprecated rules from config immediately (e.g., `ANN101` removed in ruff 0.5+)

**Quality Enforcement:**
- **Pre-commit**: Always run `./scripts/format.sh` before committing
- **CI Integration**: All linting must pass in GitHub Actions
- **Type Checking**: MyPy configured for strict type checking with `disallow_untyped_defs`

**Rule Modification Process:**
1. Test rule changes locally with `uv run ruff check app tests`
2. Verify formatting compatibility with `uv run ruff format app tests`
3. Update CI if adding new rule categories
4. Document rationale for ignored rules in pyproject.toml comments

## Code Review Checklist

**CRITICAL - Must Fix Before Merge:**
- [ ] **BLOCKING_IO_IN_ASYNC_ROUTE**: No blocking I/O in FastAPI async routes (use Celery or `run_in_executor`)
- [ ] **UNHANDLED_RUST_PANIC**: All Rust function calls wrapped in try/except blocks
- [ ] **MISSING_FILE_CLEANUP**: File operations have cleanup in `finally` blocks
- [ ] **ASYNC_SYNC_BOUNDARY_VIOLATION**: Proper async/sync coordination patterns

**HIGH PRIORITY - Address Before Production:**
- [ ] **INCORRECT_ORCASLICER_CALL**: OrcaSlicer CLI arguments validated against documentation
- [ ] **MISSING_INPUT_VALIDATION**: All user inputs validated through Pydantic models
- [ ] **INSECURE_FILENAME_HANDLING**: `secure_filename()` applied to user-provided names
- [ ] **MISSING_TIMEOUT_PROTECTION**: External calls have reasonable timeout limits
- [ ] **INCORRECT_PYO3_INTEGRATION**: PyO3 classes use `#[derive(Debug, Clone)]` only (no Serde), avoid explicit `#[new]`, use factory functions

**MEDIUM PRIORITY - Code Quality:**
- [ ] **MISSING_CELERY_IDEMPOTENCY**: Tasks can be safely re-executed
- [ ] **INCONSISTENT_ERROR_HANDLING**: Uniform error patterns across similar operations
- [ ] **MISSING_STRUCTURED_LOGGING**: Context included in log messages for async operations
- [ ] **PERFORMANCE_ANTIPATTERNS**: No unnecessary blocking operations or resource leaks

**Automated Checks:**
- All ruff linting rules pass
- MyPy type checking without errors  
- Test coverage maintained above 80%
- No security vulnerabilities in dependencies

## Common Issues and Patterns

**Memory Management:**
- Rust validation uses `BufReader` for streaming (never load entire files)
- Python file operations use chunked reading
- OrcaSlicer timeout protection (default 5 minutes)

**Error Handling Patterns:**
- Rust components have graceful fallback when unavailable
- Telegram notifications have error capture for debugging
- File cleanup always happens in finally blocks
- Use structured logging with context for async operations
- Wrap external CLI calls with timeout and proper error capture

**Debugging Async/Celery Issues:**
```bash
# Check Celery worker status and active tasks
uv run celery -A app.tasks inspect active
uv run celery -A app.tasks inspect stats

# Debug worker with verbose logging
uv run celery -A app.tasks worker --loglevel=debug --concurrency=1

# Monitor task execution in real-time
uv run celery -A app.tasks events

# Clear failed tasks from queue
uv run celery -A app.tasks purge
```

**Common OrcaSlicer Problems:**
- **CLI Not Found**: Verify `ORCASLICER_CLI_PATH` in environment
- **Profile Missing**: Check `SLICER_PROFILES_DIR` contains machine/, filament/, process/ subdirs
- **Timeout Issues**: Increase timeout for large/complex models
- **Permission Errors**: Ensure OrcaSlicer executable has proper permissions
- **Memory Issues**: Monitor system memory during slicing of large files

**Redis Connection Troubleshooting:**
```bash
# Test Redis connectivity
redis-cli ping                    # Should return PONG
redis-cli info replication       # Check Redis server info

# Monitor Redis operations
redis-cli monitor                 # Real-time command monitoring
redis-cli --latency              # Check connection latency

# Check Celery broker connection
uv run python -c "from app.tasks import app; print(app.control.inspect().stats())"
```

**File Upload Error Patterns:**
- **Large File Timeout**: Increase nginx `client_max_body_size` and timeout settings
- **Invalid File Type**: Check file validation in Rust layer logs
- **Path Traversal**: Verify `secure_filename()` is applied to all user inputs
- **Disk Space**: Monitor available disk space in upload directory
- **Async Upload Issues**: Check for proper await patterns in FastAPI routes

**Performance Debugging:**
```bash
# Profile async operations
uv run python -m cProfile -s cumulative app/main.py

# Monitor Celery task performance
uv run celery -A app.tasks inspect active_queues
uv run celery -A app.tasks inspect reserved

# Check system resources during processing
htop                              # CPU and memory usage
iostat -x 1                      # Disk I/O monitoring
```

**Testing Philosophy:**
- **"1 test per function, test code logic only"** - Focus on behavior, not configuration values
- **Test code logic**, not data validation already handled by Pydantic
- **Simple assertions** - Test return types, structure, and key behaviors
- **Avoid over-complication** - Don't test every possible input combination
- **Real objects over mocks for PyO3** - Use actual Rust functions to create objects in tests
- **Mock external services only** - Keep tests fast and reliable by mocking I/O, not objects

**PyO3 Testing Patterns - CRITICAL:**
- **NEVER mock PyO3 objects** - Always use real Rust functions like `parse_slicer_output()`
- **Use factory functions in tests** - Create real objects via Rust functions
- **Test with actual Rust integration** - Verify the Python-Rust boundary works correctly
- **Mock external I/O only** - Mock network calls, file systems, CLI processes - not Rust objects

**What TO Test:**
- Function return types and structure (`isinstance(result, CostBreakdown)`)
- Key business logic and calculations using real Rust objects
- Error handling and edge cases with real object creation
- Integration between Python services and Rust components
- Custom validation logic (not Pydantic validators)

**What NOT to Test:**
- Configuration values (Pydantic handles validation)
- External service responses (mock them)
- Different materials/inputs if logic is identical
- Framework behavior (FastAPI, Celery internals)
- Library functionality (requests, aiofiles, etc.)
- **PyO3 object constructors directly** - Use factory functions instead

**Test Structure Examples:**
```python
# GOOD: Real Rust objects via factory functions
async def create_real_slicing_result() -> SlicingResult:
    with tempfile.TemporaryDirectory() as temp_dir:
        gcode_file = os.path.join(temp_dir, 'test.gcode')
        with open(gcode_file, 'w') as f:  # noqa: ASYNC230  # Test file creation
            f.write('; estimated printing time: 2h 0m\n; filament used: 100.0g\n')
        return await parse_slicer_output(temp_dir)  # Real Rust function

def test_calculate_quote():
    slicing_result = asyncio.run(create_real_slicing_result())  # Real object
    result = pricing_service.calculate_quote(slicing_result, MaterialType.PLA)
    assert isinstance(result, CostBreakdown)  # Real Rust object
    assert result.total_cost > 0

# BAD: Mocking PyO3 objects
def test_calculate_quote_bad():
    mock_result = MagicMock()  # Don't do this for PyO3 objects
    mock_result.print_time_minutes = 120
    # This doesn't test the real Rust-Python integration

# BAD: Testing configuration values
def test_pla_price_is_25_dollars():
    assert settings.material_prices["PLA"] == 25.0  # Pydantic already validates this
```

**Implementation Strategy:**
- **Always use real Rust objects** - Create via functions like `parse_slicer_output()`, `calculate_quote_rust()`
- **Mock OrcaSlicer CLI process** - Avoid actual slicing but use real object creation
- **Test Rust validation with real files** - Use sample STL/OBJ/STEP files with actual validation
- **Integration tests verify real pipeline** - Real objects flowing through Python services
- **Use pytest fixtures for environment** - Redis, Celery, file isolation - not object creation
- **Test error scenarios with real objects** - File corruption, parsing failures with actual Rust

**Real Object Creation Patterns:**
```python
# Create real SlicingResult via Rust parser
async def create_slicing_result() -> SlicingResult:
    return await parse_slicer_output(temp_dir_with_gcode)

# Create real CostBreakdown via Rust pricing
def create_cost_breakdown() -> CostBreakdown:
    return calculate_quote_rust(120, 25.5, "PLA", 25.0, 0.5, 1.1, 5.0)

# Create real CleanupStats via Rust cleanup
def create_cleanup_stats() -> CleanupStats:
    return cleanup_old_files_rust(upload_dir, 24)
```

**Refactoring Legacy Tests:**
- **Replace PyO3 mocks with real objects** - Use factory functions from Rust
- **Simplify value checking** - Focus on behavior, not configuration
- **Reduce mock complexity** - Only mock external I/O, never Rust objects
- **Keep real object creation** - Tests should verify actual Rust-Python integration

## Task Management & Planning

**When to Use TodoWrite/TodoRead:**
- **Complex multi-step tasks** (3+ distinct steps or operations)
- **Non-trivial implementation work** requiring careful planning
- **User provides multiple tasks** (numbered lists, comma-separated requests)
- **After receiving new complex instructions** to capture all requirements
- **When starting work on a task** (mark as in_progress BEFORE beginning)
- **After completing a task** (mark as completed and add discovered follow-ups)

**Task Structure Best Practices:**
- **One todo per function/component** being implemented or fixed
- **Specific, actionable items** with clear completion criteria
- **Break complex tasks** into smaller, manageable steps
- **Priority levels**: high (blocking), medium (important), low (nice-to-have)
- **Only ONE task in_progress** at any time for focus

**Task Management Workflow:**
1. **Read existing todos** with TodoRead to understand current state
2. **Plan the work** by creating specific, actionable todos
3. **Mark in_progress** before starting work on a task
4. **Update status** as work progresses (complete immediately after finishing)
5. **Add new tasks** discovered during implementation
6. **Clean up completed** tasks periodically

**When NOT to Use:**
- Single, straightforward tasks (can be completed in 1-2 trivial steps)
- Purely conversational or informational requests
- Tasks that provide no organizational benefit

This system demonstrates thoroughness and helps users track progress on complex requests.

## Technical Debt Management

**Debt Tracking Standards:**

**TODO Comment Format (for trackable technical debt):**
```python
# TODO-DEBT: [CATEGORY] Brief description - Priority: HIGH/MEDIUM/LOW
# Context: Why this exists and what should replace it
# Example: TODO-DEBT: [MYPY] Remove union-attr ignore when Pydantic BaseSettings typing improves - Priority: LOW
```

**Debt Categories:**
- **[MYPY]**: Type checking improvements
- **[ASYNC]**: Async/sync boundary issues
- **[PERF]**: Performance optimizations
- **[RUST]**: Rust integration improvements
- **[SECURITY]**: Security hardening
- **[ARCH]**: Architectural improvements

**Debt Resolution Workflow:**
1. **Inventory Phase**: Use `grep -r "TODO-DEBT" app/ tests/` to list all tracked debt
2. **Prioritization**: HIGH = blocks production, MEDIUM = affects maintainability, LOW = future improvements
3. **Resolution**: Address in order: HIGH → MEDIUM → LOW within same category
4. **Validation**: Use `mcp__zen__codereview` for complex debt resolution

**Monthly Debt Review Process:**
```bash
# Generate debt report
grep -r "TODO-DEBT.*Priority: HIGH" app/ tests/
grep -r "TODO-DEBT.*Priority: MEDIUM" app/ tests/
grep -r "TODO-DEBT.*Priority: LOW" app/ tests/

# Target: Resolve 1-2 HIGH priority items per month
# Target: Address 1 MEDIUM priority item per month when no HIGH items exist
```

**Integration with Type Ignores:**
```python
# Current: self.profiles_dir = self.settings.slicer_profiles.base_dir  # type: ignore[union-attr]
# Improved:
# TODO-DEBT: [MYPY] Remove union-attr ignore when Pydantic BaseSettings typing improves - Priority: LOW
# Context: Settings.slicer_profiles is Optional but always set in validation, Pydantic typing unclear
self.profiles_dir = self.settings.slicer_profiles.base_dir  # type: ignore[union-attr]
```

## Problem Escalation & Tool Strategy

**Escalation Decision Tree:**

**Level 1 - Direct Implementation (No special tools needed)**
- Single file edits with clear requirements
- Bug fixes with obvious causes
- Adding simple validation or configuration
- Standard CRUD operations

**Level 2 - Use Standard Analysis Tools**
- Multi-file changes requiring codebase understanding
- Debugging with unclear error messages
- Performance optimization needs
- Integration between 2-3 components
- **Tools**: Grep, Read, TodoWrite for planning

**Level 3 - Use Advanced Analysis (mcp__zen__* tools)**
- Complex architectural decisions
- Root cause analysis for mysterious issues
- Security analysis and code review
- Large refactoring or system redesign
- Integration across 4+ components

**Specific Tool Usage Patterns:**
```bash
# Before making architectural changes
mcp__zen__thinkdeep    # Deep analysis of design decisions
mcp__zen__chat         # Validate approach with thinking partner

# Before committing any changes  
mcp__zen__precommit    # MANDATORY - validate all git operations

# When debugging complex issues
mcp__zen__debug        # Systematic root cause analysis with file evidence

# When adding major features
mcp__zen__codereview   # Comprehensive code quality analysis
```

**Claude Decision Guidelines:**
- **Automatically escalate** to Level 3 when encountering: security issues, async/sync boundary problems, performance bottlenecks
- **Use thinking_mode: 'high'** for all architectural decisions in this complex multi-language system
- **Always include relevant files** when using advanced tools (don't limit context)

## Advanced Analysis Tools

**Tool Selection Criteria:**
- **mcp__zen__thinkdeep**: Deep architectural decisions, complex problem analysis, validation of approaches
- **mcp__zen__codereview**: Comprehensive code analysis, security audits, architectural validation
- **mcp__zen__debug**: Root cause analysis, tracing complex issues, error investigation
- **mcp__zen__analyze**: General file/code exploration, dependency analysis, pattern detection
- **mcp__zen__chat**: Brainstorming, second opinions, collaborative thinking, concept explanations
- **mcp__zen__precommit**: Pre-commit validation, change analysis, safety checks

**Thinking Mode Guidelines:**
- **minimal**: Quick checks, simple confirmations
- **low**: Standard debugging, basic analysis
- **medium**: Normal problem solving, code review
- **high**: Complex architectural decisions, security analysis (default for this project)
- **max**: Critical systems, extremely complex challenges

**When to Use Advanced Tools:**
- **Complex Problems**: Use thinkdeep for multi-faceted architectural challenges
- **Security Concerns**: Always use precommit before any git operations
- **Code Quality**: Use codereview for comprehensive analysis of new features
- **Debugging Issues**: Use debug tool with comprehensive file context (include logs, stack traces)
- **Brainstorming**: Use chat for exploring alternatives and validating approaches
- **Validation**: Use analyze for understanding existing code structure

**Tool Combinations:**
- **Planning Phase**: chat → thinkdeep → analyze (explore → validate → understand)
- **Implementation**: codereview → debug → precommit (quality → troubleshoot → validate)
- **Problem Solving**: debug → thinkdeep → chat (investigate → analyze → explore solutions)

**File Context Strategy:**
- **Include liberally**: These tools can handle large amounts of context
- **Related files**: Include all files that might be relevant to the analysis
- **Diagnostic data**: Include logs, stack traces, error outputs for debugging
- **Configuration files**: Include settings and config when analyzing system behavior

## Claude Behavior Guidelines

**Response Quality Standards:**
- Use `pro` model and `high` thinking mode for complex architectural decisions
- Always provide contextual explanations specific to this 3D printing system
- Include relevant file paths and line numbers when referencing code
- Proactively check for architectural antipatterns before suggesting solutions

**Code Generation Patterns:**
- Follow established architectural patterns (API Task Offload, Rust Calculation, CLI Integration)
- Include proper error handling and resource cleanup in all generated code
- Generate complete, testable implementations rather than partial snippets
- Validate external tool usage (OrcaSlicer CLI) against current documentation

**Proactive Error Detection:**
- Check for blocking I/O in async contexts before suggesting FastAPI routes
- Ensure Rust integration follows PyO3 safety patterns
- Verify file handling includes proper cleanup mechanisms
- Validate Celery task patterns for idempotency and error recovery

**Domain Expertise Application:**
- Understand 3D printing workflow: STL → Slicing → G-code → Analysis
- Know OrcaSlicer CLI patterns and common failure modes
- Recognize material-specific processing requirements (PLA, PETG, ASA)
- Apply security best practices for file upload and processing systems
</file>

<file path="docker-compose.yml">
version: '3.8'

x-common-config: &common-config
  build: .
  environment:
    - REDIS_URL=redis://redis:6379/0
    - CELERY_BROKER_URL=redis://redis:6379/0
    - CELERY_RESULT_BACKEND=redis://redis:6379/0
  volumes:
    - ./uploads:/app/uploads
    - ./config:/app/config
    - ./logs:/app/logs
  depends_on:
    redis:
      condition: service_healthy

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    <<: *common-config
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    <<: *common-config
    command: celery -A app.tasks worker --loglevel=info --concurrency=2

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/app/static:ro
    depends_on:
      - app

volumes:
  redis_data:
</file>

<file path="Dockerfile">
# Use Python 3.11 slim image as base
FROM python:3.11-slim as builder

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Set work directory
WORKDIR /app

# Copy project files
COPY pyproject.toml Cargo.toml ./
COPY src/ src/
COPY app/ app/

# Install dependencies and build
RUN uv sync --frozen
RUN uv run maturin develop --release

# Production stage
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    redis-server \
    flatpak \
    && rm -rf /var/lib/apt/lists/*

# Install OrcaSlicer via Flatpak
RUN flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
RUN flatpak install -y flathub io.github.softfever.OrcaSlicer

# Install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Set work directory
WORKDIR /app

# Copy built application from builder
COPY --from=builder /app/.venv /app/.venv
COPY --from=builder /app/app /app/app
COPY --from=builder /app/pyproject.toml /app/pyproject.toml

# Copy additional files
COPY templates/ templates/
COPY static/ static/
COPY config/ config/
COPY scripts/ scripts/
COPY example.env .env

# Create directories
RUN mkdir -p uploads logs

# Make sure we use virtual environment
ENV PATH="/app/.venv/bin:$PATH"

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
</file>

<file path="example.env">
# ================================================================================
# ENVIRONMENT VARIABLES TEMPLATE
# ================================================================================
# SECURITY: This file is safe to commit - it contains NO actual secrets
# USAGE: Copy this file to .env and fill in your actual values
# COMMAND: cp example.env .env
# ================================================================================

# Application settings
DEBUG=false
SECRET_KEY=REPLACE_WITH_STRONG_RANDOM_SECRET_KEY_MINIMUM_32_CHARS

# Server settings
HOST=0.0.0.0
PORT=8000

# File upload settings
# MAX_FILE_SIZE: 100MB in bytes
MAX_FILE_SIZE=104857600
UPLOAD_DIR=uploads

# OrcaSlicer settings
ORCASLICER_CLI_PATH=/var/lib/flatpak/exports/bin/io.github.softfever.OrcaSlicer
SLICER_TIMEOUT=300

# Slicer profile configuration
# Override default profile directory (optional)
# SLICER_PROFILES__BASE_DIR=config/slicer_profiles

# Override default machine profile (optional)
# SLICER_PROFILES__MACHINE=Bambu_Lab_P1S_0.4_nozzle.ini

# Override default process profile (optional) 
# SLICER_PROFILES__PROCESS=0.20mm_Standard_@BBL_P1P.ini

# Override filament profiles for official materials (optional)
# SLICER_PROFILES__FILAMENT_PLA=Generic_PLA.ini
# SLICER_PROFILES__FILAMENT_PETG=Generic_PETG.ini
# SLICER_PROFILES__FILAMENT_ASA=Generic_ASA.ini

# Pricing settings (all prices in SGD)
DEFAULT_PRICE_PER_KG=25.0
PRICE_MULTIPLIER=1.1
MINIMUM_PRICE=5.0
ADDITIONAL_TIME_HOURS=0.5

# Material pricing per kg
MATERIAL_PRICES={"PLA": 25.0, "PETG": 30.0, "ASA": 35.0}

# Redis/Celery settings
REDIS_URL=redis://localhost:6379/0
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# ================================================================================
# SENSITIVE CREDENTIALS (NEVER commit actual values)
# ================================================================================

# Telegram bot settings (REQUIRED for notifications)
TELEGRAM_BOT_TOKEN=REPLACE_WITH_YOUR_ACTUAL_BOT_TOKEN_FROM_BOTFATHER
TELEGRAM_ADMIN_CHAT_ID=REPLACE_WITH_YOUR_ACTUAL_CHAT_ID_NUMBER

# ================================================================================
# SETUP INSTRUCTIONS:
# 1. Copy this file: cp example.env .env
# 2. Edit .env with your actual secret values
# 3. NEVER commit the .env file (it's in .gitignore)
# 4. Rotate secrets immediately if they're ever exposed
# ================================================================================
</file>

<file path="LICENSE">
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.
</file>

<file path="nginx.conf">
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript 
               application/javascript application/xml+rss 
               application/json application/xml;

    # File upload limits
    client_max_body_size 100M;
    client_body_timeout 120s;
    client_header_timeout 120s;

    upstream app {
        server app:8000;
    }

    server {
        listen 80;
        server_name localhost;

        # Static files
        location /static/ {
            alias /app/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Health check
        location /health {
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Main application
        location / {
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts for file uploads
            proxy_connect_timeout 120s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    }
}
</file>

<file path="poc_orcaslicer.py">
#!/usr/bin/env python3
"""
Proof of Concept script to test OrcaSlicer CLI and understand output format.
This script will help us understand what data is available from the slicer.
"""

import os
import subprocess
import sys
import tempfile

# OrcaSlicer CLI path
ORCASLICER_CLI = "/var/lib/flatpak/exports/bin/io.github.softfever.OrcaSlicer"


def test_orcaslicer_info(model_path: str):
    """Test the --info flag to see what information is available."""
    print(f"\n=== Testing --info flag with {model_path} ===")

    try:
        result = subprocess.run(
            [ORCASLICER_CLI, "--info", model_path],
            capture_output=True,
            text=True,
            timeout=60,
        )

        print(f"Return code: {result.returncode}")
        print(f"STDOUT:\n{result.stdout}")
        if result.stderr:
            print(f"STDERR:\n{result.stderr}")

    except subprocess.TimeoutExpired:
        print("Command timed out")
    except subprocess.CalledProcessError as e:
        print(f"Command failed: {e}")
    except FileNotFoundError:
        print(f"OrcaSlicer CLI not found at {ORCASLICER_CLI}")


def test_orcaslicer_slice_export(model_path: str):
    """Test slicing with --export-slicedata to see what files are generated."""
    print(f"\n=== Testing slicing with --export-slicedata for {model_path} ===")

    # Create temporary output directory
    with tempfile.TemporaryDirectory() as temp_dir:
        output_dir = os.path.join(temp_dir, "slicedata")
        os.makedirs(output_dir, exist_ok=True)

        try:
            # Try basic slicing with export
            command = [
                ORCASLICER_CLI,
                model_path,
                "--slice",
                "0",  # Slice all plates
                "--export-slicedata",
                output_dir,
                "--debug",
                "3",  # Info level debugging
            ]

            print(f"Running command: {' '.join(command)}")

            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                timeout=300,  # 5 minutes timeout
            )

            print(f"Return code: {result.returncode}")
            print(f"STDOUT:\n{result.stdout}")
            if result.stderr:
                print(f"STDERR:\n{result.stderr}")

            # Inspect output directory
            print(f"\n=== Inspecting output directory: {output_dir} ===")
            if os.path.exists(output_dir):
                for root, _dirs, files in os.walk(output_dir):
                    level = root.replace(output_dir, "").count(os.sep)
                    indent = " " * 2 * level
                    print(f"{indent}{os.path.basename(root)}/")
                    subindent = " " * 2 * (level + 1)
                    for file in files:
                        file_path = os.path.join(root, file)
                        file_size = os.path.getsize(file_path)
                        print(f"{subindent}{file} ({file_size} bytes)")

                        # Try to read small files to understand content
                        if file_size < 10000:  # Less than 10KB
                            try:
                                with open(file_path, encoding="utf-8") as f:
                                    content = f.read()
                                    print(f"{subindent}Content preview:")
                                    print(f"{subindent}{content[:500]}...")
                            except (UnicodeDecodeError, Exception):
                                print(f"{subindent}Binary file or unreadable")
            else:
                print("Output directory was not created!")

        except subprocess.TimeoutExpired:
            print("Slicing command timed out")
        except subprocess.CalledProcessError as e:
            print(f"Slicing command failed: {e}")
        except FileNotFoundError:
            print(f"OrcaSlicer CLI not found at {ORCASLICER_CLI}")


def create_test_stl() -> str:
    """Create a simple test STL file if none exists."""
    test_file = "test_cube.stl"
    if not os.path.exists(test_file):
        # Create a simple ASCII STL cube (10x10x10mm)
        stl_content = """solid cube
  facet normal 0.0 0.0 -1.0
    outer loop
      vertex 0.0 0.0 0.0
      vertex 10.0 0.0 0.0
      vertex 10.0 10.0 0.0
    endloop
  endfacet
  facet normal 0.0 0.0 -1.0
    outer loop
      vertex 0.0 0.0 0.0
      vertex 10.0 10.0 0.0
      vertex 0.0 10.0 0.0
    endloop
  endfacet
  facet normal 0.0 0.0 1.0
    outer loop
      vertex 0.0 0.0 10.0
      vertex 10.0 10.0 10.0
      vertex 10.0 0.0 10.0
    endloop
  endfacet
  facet normal 0.0 0.0 1.0
    outer loop
      vertex 0.0 0.0 10.0
      vertex 0.0 10.0 10.0
      vertex 10.0 10.0 10.0
    endloop
  endfacet
endsolid cube"""

        with open(test_file, "w") as f:
            f.write(stl_content)
        print(f"Created test STL file: {test_file}")

    return test_file


def main() -> None:
    print("OrcaSlicer CLI Proof of Concept")
    print("=" * 50)

    # Check if OrcaSlicer CLI exists
    if not os.path.exists(ORCASLICER_CLI):
        print(f"Error: OrcaSlicer CLI not found at {ORCASLICER_CLI}")
        print("Please verify the installation path.")
        sys.exit(1)

    # Create or use test file
    if len(sys.argv) > 1:
        test_file = sys.argv[1]
        if not os.path.exists(test_file):
            print(f"Error: File {test_file} not found")
            sys.exit(1)
    else:
        test_file = create_test_stl()

    print(f"Using test file: {test_file}")

    # Test different CLI approaches
    test_orcaslicer_info(test_file)
    test_orcaslicer_slice_export(test_file)

    print("\n" + "=" * 50)
    print("PoC completed. Check the output above to understand:")
    print("1. What information --info provides")
    print("2. What files --export-slicedata creates")
    print("3. Where print time and filament usage might be stored")


if __name__ == "__main__":
    main()
</file>

<file path="pyproject.toml">
[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "orca-quote-machine"
description = "3D printing quotation webapp with OrcaSlicer integration"
version = "0.1.0"
requires-python = ">=3.8"
authors = [
    {name = "Augustine", email = "your-email@example.com"},
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.1",
    "celery>=5.3.0",
    "redis>=5.0.0",
    "python-telegram-bot>=20.6",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "jinja2>=3.1.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
    "ruff==0.11.13",
    "mypy>=1.7.0",
    "maturin>=1.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
]

[dependency-groups]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
    "ruff==0.11.13",
    "mypy>=1.7.0",
    "maturin>=1.0.0",
    "types-aiofiles>=24.1.0.20241221",
]

[tool.maturin]
features = ["pyo3/extension-module"]
module-name = "orca_quote_machine._rust_core"

[tool.ruff]
# Define the source directories for Ruff to scan.
# Based on your structure, we'll target the Python application code and tests.
src = ["app", "tests"]

# Exclude common directories, build artifacts, and the Rust source directory.
# This prevents Ruff from trying to parse files it shouldn't.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "target", # Exclude Rust build artifacts
    "src",    # Exclude the Rust source code directory
]

# Target the lowest Python version you support (from your CI matrix).
# This ensures code is compatible and uses modern features available in 3.11+.
target-version = "py311"

[tool.ruff.lint]
# A curated set of rules for a modern, robust, and performant application.
# E/F: pyflakes/pycodestyle (core)  W: pycodestyle warnings
# I: isort (import sorting)        UP: pyupgrade (modernize code)
# B: flake8-bugbear (find bugs)    C4: flake8-comprehensions (cleaner comprehensions)
# SIM: flake8-simplify (simplify code)
# ANN: flake8-annotations (type hint best practices)
# PYD: pydantic-specific rules
# ASYNC: flake8-async rules
# TID: flake8-tidy-imports (cleaner imports)
select = ["E", "F", "W", "I", "UP", "B", "C4", "SIM", "ANN", "ASYNC", "TID"]

# Ignore rules that are incompatible with common FastAPI/Pydantic patterns.
ignore = [
    "B008",    # FastAPI's Depends() uses function calls in argument defaults.
    "ANN401",  # Allow `typing.Any` for now. Can be removed for a very strict policy.
]

[tool.ruff.lint.flake8-annotations]
# Allow __init__ methods to have no return type annotation.
mypy-init-return = true
# Allow missing return types on functions that are decorated with @override
suppress-none-returning = true

[tool.ruff.lint.isort]
# Define your project's own modules as "first-party".
# This ensures `from app import ...` is sorted correctly.
known-first-party = ["app"]


[tool.ruff.format]
# Opt-in to the Ruff formatter, replacing Black.
# The configuration below is black-compatible.
quote-style = "double"
line-ending = "lf"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.ruff.lint.pycodestyle]
# Set line length to 120 characters instead of default 88
max-line-length = 120

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (may use external services)",
    "slow: Slow running tests",
    "requires_redis: Tests that require Redis to be running",
    "requires_orcaslicer: Tests that require OrcaSlicer CLI",
]
asyncio_mode = "auto"
minversion = "7.0"

[tool.mypy]
python_version = "3.11"
plugins = ["pydantic.mypy"]
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
</file>

<file path="README.md">
# OrcaSlicer Quotation Generator

A web application for generating 3D printing quotations using OrcaSlicer CLI integration.

## Features

- **Web Interface**: Clean, responsive form for quote requests
- **File Validation**: Fast Rust-based validation for STL, OBJ, and STEP files
- **Background Processing**: Async slicing and quote generation with Celery
- **OrcaSlicer Integration**: Automated slicing with configurable material profiles
- **Pricing Engine**: Flexible pricing based on material, print time, and filament usage
- **Telegram Notifications**: Instant admin notifications for new quotes
- **Material Support**: PLA, PETG, and ASA with configurable pricing

## Architecture

- **FastAPI**: Web server and API endpoints
- **Rust (PyO3)**: High-performance file validation
- **Celery + Redis**: Background task processing
- **OrcaSlicer CLI**: 3D model slicing and analysis
- **Telegram Bot**: Admin notifications

## Installation

### Prerequisites

- [uv](https://docs.astral.sh/uv/) - Fast Python package manager
- Rust and Cargo
- Redis server
- OrcaSlicer (Flatpak installation)

### Setup

1. **Quick setup with uv:**
   ```bash
   git clone <repository>
   cd orca-quote-machine
   
   # Run automated setup
   ./scripts/setup.sh
   ```

   Or manually:
   ```bash
   # Install dependencies with uv
   uv sync --group dev
   
   # Build Rust components
   uv run maturin develop
   ```

2. **Configure environment:**
   ```bash
   cp example.env .env
   # Edit .env with your settings
   ```

3. **Development commands:**
   ```bash
   # Start web server (includes Redis check)
   ./scripts/web-server.sh
   
   # Start Celery worker (separate terminal)
   ./scripts/worker.sh
   
   # Run tests
   ./scripts/test.sh
   
   # Format code
   ./scripts/format.sh
   ```

   **Production:**
   ```bash
   # Start production server (4 workers, optimized)
   ./scripts/production-server.sh
   ```

   Or manually:
   ```bash
   # Start Redis
   redis-server
   
   # Start Celery worker
   uv run celery -A app.tasks worker --loglevel=info
   
   # Development server
   uv run uvicorn app.main:app --reload
   
   # Production server
   uv run uvicorn app.main:app --workers 4 --log-level warning
   ```

## Configuration

### Environment Variables

Key settings in `.env`:

- `ORCASLICER_CLI_PATH`: Path to OrcaSlicer CLI
- `TELEGRAM_BOT_TOKEN`: Telegram bot token
- `TELEGRAM_ADMIN_CHAT_ID`: Admin chat ID for notifications
- `MATERIAL_PRICES`: Pricing per kg for different materials

### Slicer Profiles

The application requires OrcaSlicer configuration files in `config/slicer_profiles/`:
```
config/slicer_profiles/
├── machine/
│   └── default_machine.json
├── filament/
│   ├── pla.json
│   ├── petg.json
│   └── asa.json
└── process/
    └── standard_0.2mm.json
```

#### Setting up OrcaSlicer Profiles

**Option 1: Symlink from existing OrcaSlicer installation**
```bash
# Find your OrcaSlicer config directory
# Linux: ~/.config/OrcaSlicer/ or ~/.OrcaSlicer/
# macOS: ~/Library/Application Support/OrcaSlicer/
# Windows: %APPDATA%\OrcaSlicer\

# Create symlinks to your existing profiles
ln -s ~/.config/OrcaSlicer/machine config/slicer_profiles/machine
ln -s ~/.config/OrcaSlicer/filament config/slicer_profiles/filament  
ln -s ~/.config/OrcaSlicer/process config/slicer_profiles/process
```

**Option 2: Copy profiles manually**
```bash
# Copy from OrcaSlicer installation
cp -r ~/.config/OrcaSlicer/machine config/slicer_profiles/
cp -r ~/.config/OrcaSlicer/filament config/slicer_profiles/
cp -r ~/.config/OrcaSlicer/process config/slicer_profiles/

# Rename/select your desired profiles
mv config/slicer_profiles/machine/your_printer.json config/slicer_profiles/machine/default_machine.json
mv config/slicer_profiles/process/your_process.json config/slicer_profiles/process/standard_0.2mm.json
```

**Required Profile Files:**
- `machine/default_machine.json` - Your 3D printer configuration
- `filament/pla.json` - PLA material settings
- `filament/petg.json` - PETG material settings (optional)
- `filament/asa.json` - ASA material settings (optional)
- `process/standard_0.2mm.json` - Print settings (layer height, speeds, etc.)

**Note:** Ensure the G-code settings include `G92 E0` in layer change G-code to prevent slicing errors.

#### Custom Materials

The system supports custom materials beyond the official PLA/PETG/ASA:

1. **Add custom filament profile**: Place `your_material.json` in `config/slicer_profiles/filament/`
2. **No code changes needed**: The system automatically discovers new materials
3. **Convention**: Material name matches filename (e.g., `TPU.json` for TPU material)
4. **Pricing**: Custom materials use PLA pricing by default

#### Configuration Override

You can override default profiles via environment variables:

```bash
# Override machine profile
SLICER_PROFILES__MACHINE=Bambu_Lab_P1S_0.4_nozzle.json

# Override process settings  
SLICER_PROFILES__PROCESS=0.20mm_Standard_@BBL_P1P.json

# Override official material profiles
SLICER_PROFILES__FILAMENT_PLA=Generic_PLA.json
SLICER_PROFILES__FILAMENT_PETG=Generic_PETG.json
```

## Usage

1. **User Flow:**
   - Visit the web interface
   - Fill out quote form (name, WhatsApp, material, color)
   - Upload 3D model file (.stl, .obj, .step)
   - Receive confirmation message

2. **Admin Flow:**
   - Receive Telegram notification with quote details
   - Review print time, filament usage, and calculated price
   - Contact customer via WhatsApp

## API Endpoints

- `POST /quote`: Submit quote request
- `GET /status/{task_id}`: Check processing status
- `GET /health`: Health check

## Pricing Formula

```
Total = (filament_kg × price_per_kg) × (print_time + 0.5h) × 1.1
Minimum: S$5.00
```

## Development

### Testing OrcaSlicer Integration

```bash
uv run python poc_orcaslicer.py [model_file.stl]
```

### Running Tests

```bash
./scripts/test.sh
# or
uv run pytest
```

### Code Formatting

```bash
./scripts/format.sh
# or manually:
uv run black .
uv run isort .
uv run mypy app/
```

## Deployment

### Docker (Recommended)

```bash
# Build image
docker build -t orca-quote-machine .

# Run with docker-compose
docker-compose up -d
```

### Nginx Configuration

```nginx
server {
    listen 80;
    server_name your-domain.com;
    
    location / {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
```

## Troubleshooting

### Common Issues

1. **OrcaSlicer CLI not found:**
   - Verify `ORCASLICER_CLI_PATH` in `.env`
   - Check Flatpak installation

2. **Telegram notifications not working:**
   - Verify bot token and chat ID
   - Check bot permissions

3. **File validation errors:**
   - Ensure Rust components are built: `maturin develop`
   - Check file format and size limits

### Logs

- Application logs: Check FastAPI console output
- Celery logs: Check worker console output
- Redis logs: Check Redis server logs

## License

MIT License - see LICENSE file for details.
</file>

<file path="result.json">
{
    "error_string": "Success.",
    "export_time": 0,
    "plate_index": 0,
    "prepare_time": 0,
    "return_code": 0
}
</file>

</files>
