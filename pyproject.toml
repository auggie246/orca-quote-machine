[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "orca-quote-machine"
description = "3D printing quotation webapp with OrcaSlicer integration"
version = "0.1.0"
requires-python = ">=3.8"
authors = [
    {name = "Augustine", email = "your-email@example.com"},
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.1",
    "celery>=5.3.0",
    "redis>=5.0.0",
    "python-telegram-bot>=20.6",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "jinja2>=3.1.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
    "ruff==0.11.13",
    "mypy>=1.7.0",
    "maturin>=1.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
]

[dependency-groups]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
    "ruff==0.11.13",
    "mypy>=1.7.0",
    "maturin>=1.0.0",
]

[tool.maturin]
features = ["pyo3/extension-module"]
module-name = "orca_quote_machine._rust_core"

[tool.ruff]
# Define the source directories for Ruff to scan.
# Based on your structure, we'll target the Python application code and tests.
src = ["app", "tests"]

# Exclude common directories, build artifacts, and the Rust source directory.
# This prevents Ruff from trying to parse files it shouldn't.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "target", # Exclude Rust build artifacts
    "src",    # Exclude the Rust source code directory
]

# Target the lowest Python version you support (from your CI matrix).
# This ensures code is compatible and uses modern features available in 3.11+.
target-version = "py311"

[tool.ruff.lint]
# A curated set of rules for a modern, robust, and performant application.
# E/F: pyflakes/pycodestyle (core)  W: pycodestyle warnings
# I: isort (import sorting)        UP: pyupgrade (modernize code)
# B: flake8-bugbear (find bugs)    C4: flake8-comprehensions (cleaner comprehensions)
# SIM: flake8-simplify (simplify code)
# ANN: flake8-annotations (type hint best practices)
# PYD: pydantic-specific rules
# ASYNC: flake8-async rules
# TID: flake8-tidy-imports (cleaner imports)
select = ["E", "F", "W", "I", "UP", "B", "C4", "SIM", "ANN", "ASYNC", "TID"]

# Ignore rules that are incompatible with common FastAPI/Pydantic patterns.
ignore = [
    "B008",    # FastAPI's Depends() uses function calls in argument defaults.
    "ANN101",  # Missing type annotation for `self` can be noisy. Can be enabled later for stricter checks.
    "ANN401",  # Allow `typing.Any` for now. Can be removed for a very strict policy.
]

[tool.ruff.lint.flake8-annotations]
# Allow __init__ methods to have no return type annotation.
mypy-init-return = true
# Allow missing return types on functions that are decorated with @override
suppress-none-returning = true

[tool.ruff.lint.isort]
# Define your project's own modules as "first-party".
# This ensures `from app import ...` is sorted correctly.
known-first-party = ["app"]


[tool.ruff.format]
# Opt-in to the Ruff formatter, replacing Black.
# The configuration below is black-compatible.
quote-style = "double"
line-ending = "lf"

[tool.ruff.lint.pycodestyle]
# Set line length to 120 characters instead of default 88
max-line-length = 120

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (may use external services)",
    "slow: Slow running tests",
    "requires_redis: Tests that require Redis to be running",
    "requires_orcaslicer: Tests that require OrcaSlicer CLI",
]
asyncio_mode = "auto"
minversion = "7.0"

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true